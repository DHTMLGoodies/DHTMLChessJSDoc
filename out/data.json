{
    "project": {
        "name": "DHTML Chess",
        "description": "Chess Software for the Web",
        "version": "0.0.2",
        "url": "http://dhtml-chess.com/",
        "logo": "http://www.dhtml-chess.com/images/logo.png"
    },
    "files": {
        "..\\api\\src\\controller\\analysis-controller.js": {
            "name": "..\\api\\src\\controller\\analysis-controller.js",
            "modules": {},
            "classes": {
                "chess.controller.AnalysisController": 1
            },
            "fors": {},
            "namespaces": {
                "chess.controller": 1
            }
        },
        "..\\api\\src\\controller\\controller.js": {
            "name": "..\\api\\src\\controller\\controller.js",
            "modules": {
                "Controller": 1
            },
            "classes": {
                "chess.controller.Controller": 1
            },
            "fors": {},
            "namespaces": {
                "chess.controller": 1
            }
        },
        "..\\api\\src\\controller\\tactic-controller.js": {
            "name": "..\\api\\src\\controller\\tactic-controller.js",
            "modules": {},
            "classes": {
                "chess.controller.TacticController": 1
            },
            "fors": {},
            "namespaces": {
                "chess.controller": 1
            }
        },
        "..\\api\\src\\datasource\\folder-tree.js": {
            "name": "..\\api\\src\\datasource\\folder-tree.js",
            "modules": {
                "DataSource": 1
            },
            "classes": {
                "chess.dataSource.FolderTree": 1
            },
            "fors": {},
            "namespaces": {
                "chess.dataSource": 1
            }
        },
        "..\\api\\src\\datasource\\game-list.js": {
            "name": "..\\api\\src\\datasource\\game-list.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "chess.dataSource": 1
            }
        },
        "..\\api\\src\\datasource\\pgn-games.js": {
            "name": "..\\api\\src\\datasource\\pgn-games.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "chess.dataSource": 1
            }
        },
        "..\\api\\src\\datasource\\pgn-list.js": {
            "name": "..\\api\\src\\datasource\\pgn-list.js",
            "modules": {},
            "classes": {
                "chess.dataSource.GameList": 1
            },
            "fors": {},
            "namespaces": {
                "chess.dataSource": 1
            }
        },
        "..\\api\\src\\model\\game.js": {
            "name": "..\\api\\src\\model\\game.js",
            "modules": {
                "Model": 1
            },
            "classes": {
                "chess.model.Game": 1
            },
            "fors": {},
            "namespaces": {
                "chess.model": 1
            }
        },
        "..\\api\\src\\model\\move.js": {
            "name": "..\\api\\src\\model\\move.js",
            "modules": {},
            "classes": {
                "chess.model.Move": 1
            },
            "fors": {},
            "namespaces": {
                "chess.model": 1
            }
        },
        "..\\api\\src\\parser0x88\\fen-parser-0x88.js": {
            "name": "..\\api\\src\\parser0x88\\fen-parser-0x88.js",
            "modules": {
                "Parser": 1
            },
            "classes": {
                "chess.parser.FenParser0x88": 1
            },
            "fors": {},
            "namespaces": {
                "chess.parser": 1
            }
        },
        "..\\api\\src\\parser0x88\\move-0x88.js": {
            "name": "..\\api\\src\\parser0x88\\move-0x88.js",
            "modules": {},
            "classes": {
                "chess.parser.Move0x88": 1
            },
            "fors": {},
            "namespaces": {
                "chess.parser": 1
            }
        },
        "..\\api\\src\\parser0x88\\position-validator.js": {
            "name": "..\\api\\src\\parser0x88\\position-validator.js",
            "modules": {},
            "classes": {
                "chess.parser.PositionValidator": 1
            },
            "fors": {},
            "namespaces": {
                "chess.parser": 1
            }
        },
        "..\\api\\src\\pgn\\parser.js": {
            "name": "..\\api\\src\\pgn\\parser.js",
            "modules": {},
            "classes": {
                "chess.pgn.Parser": 1
            },
            "fors": {},
            "namespaces": {
                "chess.pgn": 1
            }
        },
        "..\\api\\src\\remote\\game-reader.js": {
            "name": "..\\api\\src\\remote\\game-reader.js",
            "modules": {},
            "classes": {
                "chess.remote.GameReader": 1
            },
            "fors": {},
            "namespaces": {
                "chess.remote": 1
            }
        },
        "..\\api\\src\\view\\board\\board.js": {
            "name": "..\\api\\src\\view\\board\\board.js",
            "modules": {
                "Board": 1
            },
            "classes": {
                "chess.view.board.Board": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.board": 1
            }
        },
        "..\\api\\src\\view\\board\\gui.js": {
            "name": "..\\api\\src\\view\\board\\gui.js",
            "modules": {},
            "classes": {
                "chess.view.board.GUI": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.board": 1
            }
        },
        "..\\api\\src\\view\\board\\piece.js": {
            "name": "..\\api\\src\\view\\board\\piece.js",
            "modules": {},
            "classes": {
                "chess.view.board.Piece": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.board": 1
            }
        },
        "..\\api\\src\\view\\button\\next-game.js": {
            "name": "..\\api\\src\\view\\button\\next-game.js",
            "modules": {},
            "classes": {
                "chess.view.button.NextGame": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.button": 1
            }
        },
        "..\\api\\src\\view\\button\\previous-game.js": {
            "name": "..\\api\\src\\view\\button\\previous-game.js",
            "modules": {},
            "classes": {
                "chess.view.button.PreviousGame": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.button": 1
            }
        },
        "..\\api\\src\\view\\button\\save-game.js": {
            "name": "..\\api\\src\\view\\button\\save-game.js",
            "modules": {},
            "classes": {
                "chess.view.button.SaveGame": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.button": 1
            }
        },
        "..\\api\\src\\view\\button\\tactic-hint.js": {
            "name": "..\\api\\src\\view\\button\\tactic-hint.js",
            "modules": {},
            "classes": {
                "chess.view.button.TacticHint": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.button": 1
            }
        },
        "..\\api\\src\\view\\button\\tactic-solution.js": {
            "name": "..\\api\\src\\view\\button\\tactic-solution.js",
            "modules": {},
            "classes": {
                "chess.view.button.TacticSolution": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.button": 1
            }
        },
        "..\\api\\src\\view\\buttonbar\\game.js": {
            "name": "..\\api\\src\\view\\buttonbar\\game.js",
            "modules": {},
            "classes": {
                "chess.view.buttonbar.Game": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.buttonbar": 1
            }
        },
        "..\\api\\src\\view\\command\\controller.js": {
            "name": "..\\api\\src\\view\\command\\controller.js",
            "modules": {},
            "classes": {
                "chess.view.command.Controller": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.command": 1
            }
        },
        "..\\api\\src\\view\\command\\line.js": {
            "name": "..\\api\\src\\view\\command\\line.js",
            "modules": {},
            "classes": {
                "chess.view.command.Line": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.command": 1
            }
        },
        "..\\api\\src\\view\\command\\panel.js": {
            "name": "..\\api\\src\\view\\command\\panel.js",
            "modules": {},
            "classes": {
                "chess.view.command.Panel": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.command": 1
            }
        },
        "..\\api\\src\\view\\dialog\\comment.js": {
            "name": "..\\api\\src\\view\\dialog\\comment.js",
            "modules": {},
            "classes": {
                "chess.view.dialog.Comment": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.dialog": 1
            }
        },
        "..\\api\\src\\view\\dialog\\game-import.js": {
            "name": "..\\api\\src\\view\\dialog\\game-import.js",
            "modules": {
                "Dialog": 1
            },
            "classes": {
                "chess.view.dialog.GameImport": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.dialog": 1
            }
        },
        "..\\api\\src\\view\\dialog\\new-game.js": {
            "name": "..\\api\\src\\view\\dialog\\new-game.js",
            "modules": {},
            "classes": {
                "chess.view.dialog.NewGame": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.dialog": 1
            }
        },
        "..\\api\\src\\view\\dialog\\overwrite-move.js": {
            "name": "..\\api\\src\\view\\dialog\\overwrite-move.js",
            "modules": {},
            "classes": {
                "chess.view.dialog.OverwriteMove": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.dialog": 1
            }
        },
        "..\\api\\src\\view\\dialog\\promote.js": {
            "name": "..\\api\\src\\view\\dialog\\promote.js",
            "modules": {},
            "classes": {
                "chess.view.dialog.Promote": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.dialog": 1
            }
        },
        "..\\api\\src\\view\\eco\\variation-tree.js": {
            "name": "..\\api\\src\\view\\eco\\variation-tree.js",
            "modules": {},
            "classes": {
                "chess.view.eco.VariationTree": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.eco": 1
            }
        },
        "..\\api\\src\\view\\folder\\tree.js": {
            "name": "..\\api\\src\\view\\folder\\tree.js",
            "modules": {
                "Tree": 1
            },
            "classes": {
                "chess.view.folder.Tree": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.folder": 1
            }
        },
        "..\\api\\src\\view\\gamelist\\grid.js": {
            "name": "..\\api\\src\\view\\gamelist\\grid.js",
            "modules": {
                "Grid": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {
                "chess.view.gamelist": 1
            }
        },
        "..\\api\\src\\view\\highlight\\arrow-svg.js": {
            "name": "..\\api\\src\\view\\highlight\\arrow-svg.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "..\\api\\src\\view\\highlight\\arrow-tactic.js": {
            "name": "..\\api\\src\\view\\highlight\\arrow-tactic.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "..\\api\\src\\view\\highlight\\arrow.js": {
            "name": "..\\api\\src\\view\\highlight\\arrow.js",
            "modules": {},
            "classes": {
                "chess.view.highlight.Arrow": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.highlight": 1
            }
        },
        "..\\api\\src\\view\\highlight\\square.js": {
            "name": "..\\api\\src\\view\\highlight\\square.js",
            "modules": {},
            "classes": {
                "chess.view.highlight.Square": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.highlight": 1
            }
        },
        "..\\api\\src\\view\\installer\\installer.js": {
            "name": "..\\api\\src\\view\\installer\\installer.js",
            "modules": {
                "Installer": 1
            },
            "classes": {
                "chess.view.installer.Installer": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.installer": 1
            }
        },
        "..\\api\\src\\view\\menu-item\\game-import.js": {
            "name": "..\\api\\src\\view\\menu-item\\game-import.js",
            "modules": {
                "Menu": 1
            },
            "classes": {
                "chess.view.menuItems.GameImport": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.menuItems": 1
            }
        },
        "..\\api\\src\\view\\menu-item\\new-game.js": {
            "name": "..\\api\\src\\view\\menu-item\\new-game.js",
            "modules": {},
            "classes": {
                "chess.view.menuItems.NewGame": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.menuItems": 1
            }
        },
        "..\\api\\src\\view\\menu-item\\save-game.js": {
            "name": "..\\api\\src\\view\\menu-item\\save-game.js",
            "modules": {},
            "classes": {
                "chess.view.SaveGame.NewGame": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.SaveGame": 1
            }
        },
        "..\\api\\src\\view\\message\\tactics-message.js": {
            "name": "..\\api\\src\\view\\message\\tactics-message.js",
            "modules": {},
            "classes": {
                "chess.view.message.TacticMessage": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.message": 1
            }
        },
        "..\\api\\src\\view\\metadata\\fen-field.js": {
            "name": "..\\api\\src\\view\\metadata\\fen-field.js",
            "modules": {},
            "classes": {
                "chess.view.metadata.FenField": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.metadata": 1
            }
        },
        "..\\api\\src\\view\\metadata\\game.js": {
            "name": "..\\api\\src\\view\\metadata\\game.js",
            "modules": {},
            "classes": {
                "chess.view.metadata.Game": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.metadata": 1
            }
        },
        "..\\api\\src\\view\\metadata\\move.js": {
            "name": "..\\api\\src\\view\\metadata\\move.js",
            "modules": {},
            "classes": {
                "chess.view.metadata.Move": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.metadata": 1
            }
        },
        "..\\api\\src\\view\\notation\\panel.js": {
            "name": "..\\api\\src\\view\\notation\\panel.js",
            "modules": {},
            "classes": {
                "chess.view.notation.Panel": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.notation": 1
            }
        },
        "..\\api\\src\\view\\pgn\\grid.js": {
            "name": "..\\api\\src\\view\\pgn\\grid.js",
            "modules": {},
            "classes": {
                "chess.view.gamelist.Grid": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.gamelist": 1
            }
        },
        "..\\api\\src\\view\\position\\board.js": {
            "name": "..\\api\\src\\view\\position\\board.js",
            "modules": {},
            "classes": {
                "chess.view.position.Board": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.position": 1
            }
        },
        "..\\api\\src\\view\\position\\castling.js": {
            "name": "..\\api\\src\\view\\position\\castling.js",
            "modules": {},
            "classes": {
                "chess.view.position.Castling": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.position": 1
            }
        },
        "..\\api\\src\\view\\position\\dialog.js": {
            "name": "..\\api\\src\\view\\position\\dialog.js",
            "modules": {},
            "classes": {
                "chess.view.position.Dialog": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.position": 1
            }
        },
        "..\\api\\src\\view\\position\\pieces.js": {
            "name": "..\\api\\src\\view\\position\\pieces.js",
            "modules": {},
            "classes": {
                "chess.view.position.Pieces": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.position": 1
            }
        },
        "..\\api\\src\\view\\position\\side-to-move.js": {
            "name": "..\\api\\src\\view\\position\\side-to-move.js",
            "modules": {},
            "classes": {
                "chess.view.position.SideToMove": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.position": 1
            }
        },
        "..\\api\\src\\view\\seek\\view.js": {
            "name": "..\\api\\src\\view\\seek\\view.js",
            "modules": {},
            "classes": {
                "seek.View": 1
            },
            "fors": {},
            "namespaces": {
                "seek": 1
            }
        },
        "..\\api\\src\\view\\user\\controller.js": {
            "name": "..\\api\\src\\view\\user\\controller.js",
            "modules": {
                "User": 1
            },
            "classes": {
                "chess.view.user.Controller": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.user": 1
            }
        },
        "..\\api\\src\\view\\user\\country.js": {
            "name": "..\\api\\src\\view\\user\\country.js",
            "modules": {},
            "classes": {
                "chess.view.user.Country": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.user": 1
            }
        },
        "..\\api\\src\\view\\user\\login-button.js": {
            "name": "..\\api\\src\\view\\user\\login-button.js",
            "modules": {},
            "classes": {
                "chess.view.user.LoginButton": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.user": 1
            }
        },
        "..\\api\\src\\view\\user\\login-window.js": {
            "name": "..\\api\\src\\view\\user\\login-window.js",
            "modules": {},
            "classes": {
                "chess.view.user.LoginWindow": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.user": 1
            }
        },
        "..\\api\\src\\view\\user\\logout-button.js": {
            "name": "..\\api\\src\\view\\user\\logout-button.js",
            "modules": {},
            "classes": {
                "chess.view.user.LogoutButton": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.user": 1
            }
        },
        "..\\api\\src\\view\\user\\panel.js": {
            "name": "..\\api\\src\\view\\user\\panel.js",
            "modules": {},
            "classes": {
                "chess.view.user.Panel": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.user": 1
            }
        },
        "..\\api\\src\\view\\user\\profile-window.js": {
            "name": "..\\api\\src\\view\\user\\profile-window.js",
            "modules": {},
            "classes": {
                "chess.view.user.ProfileWindow": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.user": 1
            }
        },
        "..\\api\\src\\view\\user\\register-button.js": {
            "name": "..\\api\\src\\view\\user\\register-button.js",
            "modules": {},
            "classes": {
                "chess.view.user.RegisterButton": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.user": 1
            }
        },
        "..\\api\\src\\view\\user\\register-window.js": {
            "name": "..\\api\\src\\view\\user\\register-window.js",
            "modules": {},
            "classes": {
                "chess.view.user.RegisterWindow": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.user": 1
            }
        },
        "..\\api\\src\\view\\user\\settings-button.js": {
            "name": "..\\api\\src\\view\\user\\settings-button.js",
            "modules": {},
            "classes": {
                "chess.view.user.SettingsButton": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.user": 1
            }
        },
        "..\\api\\src\\view\\user\\user-model.js": {
            "name": "..\\api\\src\\view\\user\\user-model.js",
            "modules": {},
            "classes": {
                "chess.view.user.UserModel": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.user": 1
            }
        }
    },
    "modules": {
        "Controller": {
            "name": "Controller",
            "submodules": {},
            "classes": {
                "chess.controller.AnalysisController": 1,
                "chess.controller.Controller": 1,
                "chess.controller.TacticController": 1
            },
            "fors": {},
            "namespaces": {
                "chess.controller": 1
            },
            "tag": "module",
            "file": "..\\api\\src\\controller\\tactic-controller.js",
            "line": 1,
            "description": "Game controller base class. This class acts as the glue between\ngame models and views. When something happens in current game, it sends a message/event to the\ncontroller. The controller delegates this message to the views and all views interested",
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "DataSource": {
            "name": "DataSource",
            "submodules": {},
            "classes": {
                "chess.dataSource.FolderTree": 1,
                "chess.dataSource.GameList": 1
            },
            "fors": {},
            "namespaces": {
                "chess.dataSource": 1
            },
            "tag": "module",
            "file": "..\\api\\src\\datasource\\pgn-list.js",
            "line": 1,
            "description": "Data source for list of folders and databases\nby chess.view.gamelist.Grid",
            "extends": "dataSource.JSON"
        },
        "Model": {
            "name": "Model",
            "submodules": {},
            "classes": {
                "chess.model.Game": 1,
                "chess.model.Move": 1
            },
            "fors": {},
            "namespaces": {
                "chess.model": 1
            },
            "tag": "module",
            "file": "..\\api\\src\\model\\move.js",
            "line": 1,
            "description": "Chess game model",
            "uses": [
                "{chess.parser.Move0x88}",
                "{chess.remote.GameReader}"
            ]
        },
        "Parser": {
            "name": "Parser",
            "submodules": {},
            "classes": {
                "chess.parser.FenParser0x88": 1,
                "chess.parser.Move0x88": 1,
                "chess.parser.PositionValidator": 1,
                "chess.pgn.Parser": 1,
                "chess.remote.GameReader": 1,
                "chess.view.board.Board": 1
            },
            "fors": {},
            "namespaces": {
                "chess.parser": 1,
                "chess.pgn": 1,
                "chess.remote": 1,
                "chess.view.board": 1
            },
            "tag": "module",
            "file": "..\\api\\src\\view\\board\\board.js",
            "line": 1,
            "description": "Chess position parser",
            "is_constructor": 1,
            "params": [
                {
                    "name": "fen",
                    "description": "",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar parser = new chess.parser.FenParser0x88('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1');\n\tconsole.log(parser.getValidMovesAndResult('white'));\n"
            ]
        },
        "Board": {
            "name": "Board",
            "submodules": {},
            "classes": {
                "chess.view.board.Board": 1,
                "chess.view.board.GUI": 1,
                "chess.view.board.Piece": 1,
                "chess.view.highlight.Arrow": 1,
                "chess.view.highlight.Square": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "chess.view.board": 1,
                "chess.view.highlight": 1
            },
            "module": "View",
            "namespace": "chess.remote",
            "file": "..\\api\\src\\view\\highlight\\square.js",
            "line": 1,
            "description": "Javascript Class for Chess Board and Pieces on the board\nJSON config type: chess.view.board.Board",
            "extends": "chess.view.board.GUI",
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\tchildren:[\n\t{\n\t\t type:'chess.view.board.Board',\n\t\t labels:true,\n\t\t weight:1,\n\t\t addons:[\n\t\t\t {\n\t\t\t\t type:'chess.view.highlight.Arrow',\n\t\t\t\t properties:{\n\t\t\t\t\t 'stroke-width' : 0\n\t\t\t\t }\n\t\t\t }\n\t\t ]\n\t }\n]\n"
            ]
        },
        "View": {
            "name": "View",
            "submodules": {
                "Board": 1,
                "Dialog": 1,
                "Tree": 1,
                "Grid": 1,
                "Menu": 1,
                "User": 1
            },
            "classes": {
                "chess.view.board.GUI": 1,
                "chess.view.board.Piece": 1,
                "chess.view.button.NextGame": 1,
                "chess.view.button.PreviousGame": 1,
                "chess.view.button.SaveGame": 1,
                "chess.view.button.TacticHint": 1,
                "chess.view.button.TacticSolution": 1,
                "chess.view.buttonbar.Game": 1,
                "chess.view.command.Controller": 1,
                "chess.view.command.Line": 1,
                "chess.view.command.Panel": 1,
                "chess.view.dialog.Comment": 1,
                "chess.view.dialog.GameImport": 1,
                "chess.view.dialog.NewGame": 1,
                "chess.view.dialog.OverwriteMove": 1,
                "chess.view.dialog.Promote": 1,
                "chess.view.eco.VariationTree": 1,
                "chess.view.folder.Tree": 1,
                "chess.view.gamelist.Grid": 1,
                "chess.view.highlight.Arrow": 1,
                "chess.view.highlight.Square": 1,
                "chess.view.menuItems.GameImport": 1,
                "chess.view.menuItems.NewGame": 1,
                "chess.view.SaveGame.NewGame": 1,
                "chess.view.message.TacticMessage": 1,
                "chess.view.metadata.FenField": 1,
                "chess.view.metadata.Game": 1,
                "chess.view.metadata.Move": 1,
                "chess.view.notation.Panel": 1,
                "chess.view.position.Board": 1,
                "chess.view.position.Castling": 1,
                "chess.view.position.Dialog": 1,
                "chess.view.position.Pieces": 1,
                "chess.view.position.SideToMove": 1,
                "seek.View": 1,
                "chess.view.user.Controller": 1,
                "chess.view.user.Country": 1,
                "chess.view.user.LoginButton": 1,
                "chess.view.user.LoginWindow": 1,
                "chess.view.user.LogoutButton": 1,
                "chess.view.user.Panel": 1,
                "chess.view.user.ProfileWindow": 1,
                "chess.view.user.RegisterButton": 1,
                "chess.view.user.RegisterWindow": 1,
                "chess.view.user.SettingsButton": 1,
                "chess.view.user.UserModel": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.board": 1,
                "chess.view.button": 1,
                "chess.view.buttonbar": 1,
                "chess.view.command": 1,
                "chess.view.dialog": 1,
                "chess.view.eco": 1,
                "chess.view.folder": 1,
                "chess.view.gamelist": 1,
                "chess.view.highlight": 1,
                "chess.view.menuItems": 1,
                "chess.view.SaveGame": 1,
                "chess.view.message": 1,
                "chess.view.metadata": 1,
                "chess.view.notation": 1,
                "chess.view.position": 1,
                "seek": 1,
                "chess.view.user": 1
            },
            "file": "..\\api\\src\\view\\user\\user-model.js",
            "line": 1
        },
        "Dialog": {
            "name": "Dialog",
            "submodules": {},
            "classes": {
                "chess.view.dialog.GameImport": 1,
                "chess.view.dialog.NewGame": 1,
                "chess.view.dialog.OverwriteMove": 1,
                "chess.view.dialog.Promote": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "chess.view.dialog": 1
            },
            "module": "View",
            "namespace": "chess.view.dialog",
            "file": "..\\api\\src\\view\\dialog\\promote.js",
            "line": 1,
            "description": "Game import dialog. Game import is only available to users with game edit privileges.",
            "extends": "ludo.dialog.Dialog"
        },
        "Tree": {
            "name": "Tree",
            "submodules": {},
            "classes": {
                "chess.view.folder.Tree": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "chess.view.folder": 1
            },
            "module": "View",
            "namespace": "chess.view.eco",
            "file": "..\\api\\src\\view\\folder\\tree.js",
            "line": 1,
            "description": "This view displays a list of folders and databases as a tree."
        },
        "Grid": {
            "name": "Grid",
            "submodules": {},
            "classes": {
                "chess.view.gamelist.Grid": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "View",
            "namespace": "",
            "file": "..\\api\\src\\view\\pgn\\grid.js",
            "line": 2,
            "description": "List of games view. List of games is displayed in a grid.",
            "extends": "grid.Grid",
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\tchildren:[\n\t... ,\n\t{\n\t\t titleBar:false,\n\t\t type:'chess.view.gamelist.Grid',\n\t\t weight:1,\n\t\t frame:true,\n\t\t fillview:true,\n\t\t cols:['white', 'black', 'result']\n\t }\n\t...\n\t]"
            ]
        },
        "Installer": {
            "name": "Installer",
            "submodules": {},
            "classes": {
                "chess.view.installer.Installer": 1
            },
            "fors": {},
            "namespaces": {
                "chess.view.installer": 1
            },
            "tag": "module",
            "file": "..\\api\\src\\view\\installer\\installer.js",
            "line": 1,
            "description": "The DHTML Chess installer dialog",
            "extends": "dialog.Dialog"
        },
        "Menu": {
            "name": "Menu",
            "submodules": {},
            "classes": {
                "chess.view.menuItems.GameImport": 1,
                "chess.view.menuItems.NewGame": 1,
                "chess.view.SaveGame.NewGame": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "chess.view.menuItems": 1,
                "chess.view.SaveGame": 1
            },
            "module": "View",
            "namespace": "",
            "file": "..\\api\\src\\view\\menu-item\\save-game.js",
            "line": 1,
            "description": "The game import menu item. This menu item will automatically be disabled when there are no\nvalid user sessions or if the user does not have access to the game import user role.\nOn click it will create a new chess.view.dialog.GameImport"
        },
        "User": {
            "name": "User",
            "submodules": {},
            "classes": {
                "chess.view.user.Controller": 1,
                "chess.view.user.Country": 1,
                "chess.view.user.LoginButton": 1,
                "chess.view.user.LoginWindow": 1,
                "chess.view.user.LogoutButton": 1,
                "chess.view.user.Panel": 1,
                "chess.view.user.ProfileWindow": 1,
                "chess.view.user.RegisterButton": 1,
                "chess.view.user.RegisterWindow": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "chess.view.user": 1
            },
            "module": "View",
            "namespace": "seek",
            "file": "..\\api\\src\\view\\user\\register-window.js",
            "line": 1,
            "description": "Controller for the user login/registration module",
            "extends": "controller.Controller"
        }
    },
    "classes": {
        "chess.controller.AnalysisController": {
            "name": "chess.controller.AnalysisController",
            "shortname": "chess.controller.AnalysisController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Controller",
            "namespace": "chess.controller",
            "file": "..\\api\\src\\controller\\analysis-controller.js",
            "line": 1,
            "description": "Special controller for analysis boards. It extends chess.controller.Controller but calls the\nenableDragAndDrop method of the board when the events \"setPosition\", \"nextmove\" and \"newMove\" is\nfired by current game model.",
            "extends": "chess.controller.Controller",
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\tnew chess.controller.AnalysisController();"
            ]
        },
        "chess.controller.Controller": {
            "name": "chess.controller.Controller",
            "shortname": "chess.controller.Controller",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Controller",
            "namespace": "chess.controller",
            "file": "..\\api\\src\\controller\\controller.js",
            "line": 1,
            "description": "Game controller base class. This class acts as the glue between\ngame models and views. When something happens in current game, it sends a message/event to the\ncontroller. The controller delegates this message to the views and all views interested"
        },
        "chess.controller.TacticController": {
            "name": "chess.controller.TacticController",
            "shortname": "chess.controller.TacticController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Controller",
            "namespace": "chess.controller",
            "file": "..\\api\\src\\controller\\tactic-controller.js",
            "line": 1,
            "description": "Chess game controller for tactic puzzles, i.e. boards where you make a move\nin a a game and the next move is auto played.",
            "extends": "chess.controller.Controller",
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\t var controller = new chess.controller.TacticController({\n\t\t databaseId:4,\n\t\t alwaysPlayStartingColor:true\n\t });\n\t controller.loadRandomGame();"
            ]
        },
        "chess.dataSource.FolderTree": {
            "name": "chess.dataSource.FolderTree",
            "shortname": "chess.dataSource.FolderTree",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DataSource",
            "namespace": "chess.dataSource",
            "file": "..\\api\\src\\datasource\\folder-tree.js",
            "line": 1,
            "description": "Data source for list of folders and databases\nby chess.view.gamelist.Grid"
        },
        "chess.dataSource.GameList": {
            "name": "chess.dataSource.GameList",
            "shortname": "chess.dataSource.GameList",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DataSource",
            "namespace": "chess.dataSource",
            "file": "..\\api\\src\\datasource\\pgn-list.js",
            "line": 1,
            "description": "Data source for list of games. An object of this class is automatically created\nby chess.view.gamelist.Grid"
        },
        "chess.model.Game": {
            "name": "chess.model.Game",
            "shortname": "chess.model.Game",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Model",
            "namespace": "chess.model",
            "file": "..\\api\\src\\model\\game.js",
            "line": 1,
            "description": "Chess game model"
        },
        "chess.model.Move": {
            "name": "chess.model.Move",
            "shortname": "chess.model.Move",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Model",
            "namespace": "chess.model",
            "file": "..\\api\\src\\model\\move.js",
            "line": 1,
            "description": "This is an abstract class for documentation purpose only. It describes the structure of a move in chess.model.Game"
        },
        "chess.parser.FenParser0x88": {
            "name": "chess.parser.FenParser0x88",
            "shortname": "chess.parser.FenParser0x88",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "chess.parser.Move0x88"
            ],
            "module": "Parser",
            "namespace": "chess.parser",
            "file": "..\\api\\src\\parser0x88\\fen-parser-0x88.js",
            "line": 1,
            "description": "Chess position parser"
        },
        "chess.parser.Move0x88": {
            "name": "chess.parser.Move0x88",
            "shortname": "chess.parser.Move0x88",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Parser",
            "namespace": "chess.parser",
            "file": "..\\api\\src\\parser0x88\\move-0x88.js",
            "line": 1,
            "description": "Class for move validation. This class is used by chess.model.Game",
            "uses": [
                "chess.parser.FenParser0x88"
            ],
            "is_constructor": 1,
            "example": [
                "\n\tvar validator = new chess.parser.Move0x88();\n\tvar valid = validator.isValid(\n\t\t{ from : 'h7', to : 'h6' },\n\t\t'r1bq1rk1/ppppbppp/2n2n2/4p3/2B1P3/2N2N1P/PPPP1PP1/R1BQ1RK1 b - 2 6'\n\t);\n\tif(valid){ alert('Move is valid') } else { alert('Move is invalid') };"
            ]
        },
        "chess.parser.PositionValidator": {
            "name": "chess.parser.PositionValidator",
            "shortname": "chess.parser.PositionValidator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Parser",
            "namespace": "chess.parser",
            "file": "..\\api\\src\\parser0x88\\position-validator.js",
            "line": 1,
            "description": "Class used by position setup dialog to validate positions on the board.\nWhen the position is valid the \"OK\" button will be enabled, otherwise it will be disabled.",
            "extends": "chess.parser.FenParser0x88"
        },
        "chess.pgn.Parser": {
            "name": "chess.pgn.Parser",
            "shortname": "chess.pgn.Parser",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Parser",
            "namespace": "chess.pgn",
            "file": "..\\api\\src\\pgn\\parser.js",
            "line": 1,
            "description": "Model to PGN parser. Takes a\n{{#crossLink \"chess.model.Game\"}}{{/crossLink}} as only argument\nand returns a PGN string for the game.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "model",
                    "description": "",
                    "type": "chess.model.Game"
                }
            ],
            "example": [
                "\n\t var game = new chess.model.Game();\n\t game.setMetadataValue('white','Magnus Carlsen');\n\t game.setMetadataValue('black','Levon Aronian');\n\t game.appendMove('e4');\n\t game.appendMove('e5');\n\n\t var parser = new chess.pgn.Parser(game);\n\t console.log(parser.getPgn());"
            ]
        },
        "chess.remote.GameReader": {
            "name": "chess.remote.GameReader",
            "shortname": "chess.remote.GameReader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Parser",
            "namespace": "chess.remote",
            "file": "..\\api\\src\\remote\\game-reader.js",
            "line": 1,
            "description": "Class used to load games from server. An object of this class is automatically created by\nchess.model:Game.",
            "extends": "remote.Reader"
        },
        "chess.view.board.Board": {
            "name": "chess.view.board.Board",
            "shortname": "chess.view.board.Board",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Parser",
            "submodule": "Board",
            "namespace": "chess.view.board",
            "file": "..\\api\\src\\view\\board\\board.js",
            "line": 1,
            "description": "Javascript Class for Chess Board and Pieces on the board\nJSON config type: chess.view.board.Board"
        },
        "chess.view.board.GUI": {
            "name": "chess.view.board.GUI",
            "shortname": "chess.view.board.GUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board",
            "file": "..\\api\\src\\view\\board\\gui.js",
            "line": 1,
            "description": "Javascript Class for Chess Board and Pieces on the board\nJSON config type: chess.view.board.Board"
        },
        "chess.view.board.Piece": {
            "name": "chess.view.board.Piece",
            "shortname": "chess.view.board.Piece",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board",
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 1,
            "description": "Class representing the view of chess pieces in DHTML Chess.\nInstances of this class are created dynamically by chess.view.Board"
        },
        "chess.view.button.NextGame": {
            "name": "chess.view.button.NextGame",
            "shortname": "chess.view.button.NextGame",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "namespace": "chess.view.button",
            "file": "..\\api\\src\\view\\button\\next-game.js",
            "line": 1,
            "description": "Special button used to navigate to next game in a database",
            "extends": "form.Button"
        },
        "chess.view.button.PreviousGame": {
            "name": "chess.view.button.PreviousGame",
            "shortname": "chess.view.button.PreviousGame",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "namespace": "chess.view.button",
            "file": "..\\api\\src\\view\\button\\previous-game.js",
            "line": 1,
            "description": "Special button used to navigate to previous button in a database",
            "extends": "form.Button"
        },
        "chess.view.button.SaveGame": {
            "name": "chess.view.button.SaveGame",
            "shortname": "chess.view.button.SaveGame",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "namespace": "chess.view.button",
            "file": "..\\api\\src\\view\\button\\save-game.js",
            "line": 1,
            "description": "Special button used to save a game. This button will be automatically disabled\nfor users without save game access",
            "extends": "form.Button"
        },
        "chess.view.button.TacticHint": {
            "name": "chess.view.button.TacticHint",
            "shortname": "chess.view.button.TacticHint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "namespace": "chess.view.button",
            "file": "..\\api\\src\\view\\button\\tactic-hint.js",
            "line": 1,
            "description": "Special button used to show tactic hint in tactic puzzle mode",
            "extends": "form.Button"
        },
        "chess.view.button.TacticSolution": {
            "name": "chess.view.button.TacticSolution",
            "shortname": "chess.view.button.TacticSolution",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "namespace": "chess.view.button",
            "file": "..\\api\\src\\view\\button\\tactic-solution.js",
            "line": 1,
            "description": "Special button used to show the solution, i.e. next move in a puzzle",
            "extends": "form.Button"
        },
        "chess.view.buttonbar.Game": {
            "name": "chess.view.buttonbar.Game",
            "shortname": "chess.view.buttonbar.Game",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "namespace": "chess.view.buttonbar",
            "file": "..\\api\\src\\view\\buttonbar\\game.js",
            "line": 1,
            "description": "Displays a row of button used for navigation in a game(previous move, next move etc.)",
            "extends": "View"
        },
        "chess.view.command.Controller": {
            "name": "chess.view.command.Controller",
            "shortname": "chess.view.command.Controller",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "namespace": "chess.view.command",
            "file": "..\\api\\src\\view\\command\\controller.js",
            "line": 1,
            "description": "Controller for the command line view",
            "extends": "controller.Controller"
        },
        "chess.view.command.Line": {
            "name": "chess.view.command.Line",
            "shortname": "chess.view.command.Line",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "namespace": "chess.view.command",
            "file": "..\\api\\src\\view\\command\\line.js",
            "line": 1,
            "description": "Command line input field",
            "extends": "form.Text"
        },
        "chess.view.command.Panel": {
            "name": "chess.view.command.Panel",
            "shortname": "chess.view.command.Panel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "namespace": "chess.view.command",
            "file": "..\\api\\src\\view\\command\\panel.js",
            "line": 1,
            "description": "Command line message panel",
            "extends": "View"
        },
        "chess.view.dialog.Comment": {
            "name": "chess.view.dialog.Comment",
            "shortname": "chess.view.dialog.Comment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "namespace": "chess.view.dialog",
            "file": "..\\api\\src\\view\\dialog\\comment.js",
            "line": 1,
            "description": "Move comment dialog. This dialog is by default created by a chess game controller. It listens to controller events\n\"commentAfter\" and \"commentBefore\". When these events are fired",
            "extends": "dialog.Dialog"
        },
        "chess.view.dialog.GameImport": {
            "name": "chess.view.dialog.GameImport",
            "shortname": "chess.view.dialog.GameImport",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "submodule": "Dialog",
            "namespace": "chess.view.dialog",
            "file": "..\\api\\src\\view\\dialog\\game-import.js",
            "line": 1,
            "description": "Game import dialog. Game import is only available to users with game edit privileges."
        },
        "chess.view.dialog.NewGame": {
            "name": "chess.view.dialog.NewGame",
            "shortname": "chess.view.dialog.NewGame",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "submodule": "Dialog",
            "namespace": "chess.view.dialog",
            "file": "..\\api\\src\\view\\dialog\\new-game.js",
            "line": 1,
            "description": "New game dialog. This dialog listens to the newGameDialog event from the controller."
        },
        "chess.view.dialog.OverwriteMove": {
            "name": "chess.view.dialog.OverwriteMove",
            "shortname": "chess.view.dialog.OverwriteMove",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "submodule": "Dialog",
            "namespace": "chess.view.dialog",
            "file": "..\\api\\src\\view\\dialog\\overwrite-move.js",
            "line": 1,
            "description": "Displays an overwrite move dialog. This dialog listens to\noverwriteOrVariation of the controller."
        },
        "chess.view.dialog.Promote": {
            "name": "chess.view.dialog.Promote",
            "shortname": "chess.view.dialog.Promote",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "submodule": "Dialog",
            "namespace": "chess.view.dialog",
            "file": "..\\api\\src\\view\\dialog\\promote.js",
            "line": 1,
            "description": "Promotion dialog which will be displayed when controller fires the verifyPromotion event. Which piece to promote to\nis chosen by clicking on images illustrating queen, rook, knight and bishop."
        },
        "chess.view.eco.VariationTree": {
            "name": "chess.view.eco.VariationTree",
            "shortname": "chess.view.eco.VariationTree",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "namespace": "chess.view.eco",
            "file": "..\\api\\src\\view\\eco\\variation-tree.js",
            "line": 1,
            "description": "Eco variation tree view. This view displays available next moves according to ECO.",
            "extends": "tree.Tree",
            "example": [
                "\n\tchildren:[\n\t ...\n\t {\n\t\t title:'Eco',\n\t\t type:'chess.view.eco.VariationTree'\n\t }\n\t...\n\t]"
            ]
        },
        "chess.view.folder.Tree": {
            "name": "chess.view.folder.Tree",
            "shortname": "chess.view.folder.Tree",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "submodule": "Tree",
            "namespace": "chess.view.folder",
            "file": "..\\api\\src\\view\\folder\\tree.js",
            "line": 1,
            "description": "This view displays a list of folders and databases as a tree."
        },
        "chess.view.gamelist.Grid": {
            "name": "chess.view.gamelist.Grid",
            "shortname": "chess.view.gamelist.Grid",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "submodule": "Grid",
            "namespace": "chess.view.gamelist",
            "file": "..\\api\\src\\view\\pgn\\grid.js",
            "line": 2,
            "description": "List of games view. List of games is displayed in a grid."
        },
        "chess.view.highlight.Arrow": {
            "name": "chess.view.highlight.Arrow",
            "shortname": "chess.view.highlight.Arrow",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.highlight",
            "file": "..\\api\\src\\view\\highlight\\arrow.js",
            "line": 1,
            "description": "Highlight a moves with an arrow. An object of this class is automatically created by\nchess.view.board.Board when added using \"addons\"."
        },
        "chess.view.highlight.Square": {
            "name": "chess.view.highlight.Square",
            "shortname": "chess.view.highlight.Square",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.highlight",
            "file": "..\\api\\src\\view\\highlight\\square.js",
            "line": 1,
            "description": "Add on for chess board. used to indicate current moves by highlighting squares."
        },
        "chess.view.installer.Installer": {
            "name": "chess.view.installer.Installer",
            "shortname": "chess.view.installer.Installer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Installer",
            "namespace": "chess.view.installer",
            "file": "..\\api\\src\\view\\installer\\installer.js",
            "line": 1,
            "description": "The DHTML Chess installer dialog"
        },
        "chess.view.menuItems.GameImport": {
            "name": "chess.view.menuItems.GameImport",
            "shortname": "chess.view.menuItems.GameImport",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "submodule": "Menu",
            "namespace": "chess.view.menuItems",
            "file": "..\\api\\src\\view\\menu-item\\game-import.js",
            "line": 1,
            "description": "The game import menu item. This menu item will automatically be disabled when there are no\nvalid user sessions or if the user does not have access to the game import user role.\nOn click it will create a new chess.view.dialog.GameImport"
        },
        "chess.view.menuItems.NewGame": {
            "name": "chess.view.menuItems.NewGame",
            "shortname": "chess.view.menuItems.NewGame",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "submodule": "Menu",
            "namespace": "chess.view.menuItems",
            "file": "..\\api\\src\\view\\menu-item\\new-game.js",
            "line": 1,
            "description": "Menu item \"New Game\". This menu item is automatically disabled when no user session exists and when\na user does not have access to edit games."
        },
        "chess.view.SaveGame.NewGame": {
            "name": "chess.view.SaveGame.NewGame",
            "shortname": "chess.view.SaveGame.NewGame",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "submodule": "Menu",
            "namespace": "chess.view.SaveGame",
            "file": "..\\api\\src\\view\\menu-item\\save-game.js",
            "line": 1,
            "description": "Menu item \"Save Game\". This menu item is automatically disabled when no user session exists and when\na user does not have access to edit games."
        },
        "chess.view.message.TacticMessage": {
            "name": "chess.view.message.TacticMessage",
            "shortname": "chess.view.message.TacticMessage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "namespace": "chess.view.message",
            "file": "..\\api\\src\\view\\message\\tactics-message.js",
            "line": 1,
            "description": "Tactic message showing wrong move or incorrect move. This view listens to controller events\nwrongGuess, correctGuess and newGame. On newGame it will display which color to move.",
            "extends": "View"
        },
        "chess.view.metadata.FenField": {
            "name": "chess.view.metadata.FenField",
            "shortname": "chess.view.metadata.FenField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "namespace": "chess.view.metadata",
            "file": "..\\api\\src\\view\\metadata\\fen-field.js",
            "line": 1,
            "description": "This is a text/input-field showing position of current move. It will be updated when one of the following events is fired by\nthe controller: newGame, setPosition, newMove, nextMove.",
            "extends": "form.Text"
        },
        "chess.view.metadata.Game": {
            "name": "chess.view.metadata.Game",
            "shortname": "chess.view.metadata.Game",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "namespace": "chess.view.metadata",
            "file": "..\\api\\src\\view\\metadata\\game.js",
            "line": 1,
            "description": "This class shows metadata(example: white,black etc) of current game. It listens to the \"newGame\" event of the controller",
            "extends": "View"
        },
        "chess.view.metadata.Move": {
            "name": "chess.view.metadata.Move",
            "shortname": "chess.view.metadata.Move",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "namespace": "chess.view.metadata",
            "file": "..\\api\\src\\view\\metadata\\move.js",
            "line": 1,
            "description": "Class used to show info about current move. This view is updated when one of the following events is fired by the controller, i.e.\ncontrollers active game model.\nsetPosition, nextmove, newMove, newGame",
            "extends": "View"
        },
        "chess.view.notation.Panel": {
            "name": "chess.view.notation.Panel",
            "shortname": "chess.view.notation.Panel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "namespace": "chess.view.notation",
            "file": "..\\api\\src\\view\\notation\\panel.js",
            "line": 1,
            "description": "Game notation panel.",
            "extends": "View",
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n \tchildren:[\n \t...\n \t{\n\t\t type:'chess.view.notation.Panel',\n\t\t notations:'long',\n\t\t showContextMenu:true\n\t }\n \t..."
            ]
        },
        "chess.view.position.Board": {
            "name": "chess.view.position.Board",
            "shortname": "chess.view.position.Board",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "namespace": "chess.view.position",
            "file": "..\\api\\src\\view\\position\\board.js",
            "line": 1,
            "description": "Chess board for the position setup dialog",
            "extends": "chess.view.board.Board"
        },
        "chess.view.position.Castling": {
            "name": "chess.view.position.Castling",
            "shortname": "chess.view.position.Castling",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "namespace": "chess.view.position",
            "file": "..\\api\\src\\view\\position\\castling.js",
            "line": 1,
            "description": "Castling panel for the position setup dialog",
            "extends": "Panel"
        },
        "chess.view.position.Dialog": {
            "name": "chess.view.position.Dialog",
            "shortname": "chess.view.position.Dialog",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "namespace": "chess.view.position",
            "file": "..\\api\\src\\view\\position\\dialog.js",
            "line": 1,
            "description": "Position setup dialog",
            "extends": "ludo.dialog.Dialog"
        },
        "chess.view.position.Pieces": {
            "name": "chess.view.position.Pieces",
            "shortname": "chess.view.position.Pieces",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "namespace": "chess.view.position",
            "file": "..\\api\\src\\view\\position\\pieces.js",
            "line": 1,
            "description": "Piece panel for the position setup dialog",
            "extends": "View"
        },
        "chess.view.position.SideToMove": {
            "name": "chess.view.position.SideToMove",
            "shortname": "chess.view.position.SideToMove",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "namespace": "chess.view.position",
            "file": "..\\api\\src\\view\\position\\side-to-move.js",
            "line": 1,
            "description": "Side to move panel for the position setup dialog",
            "extends": "Panel"
        },
        "seek.View": {
            "name": "seek.View",
            "shortname": "seek.View",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "namespace": "seek",
            "file": "..\\api\\src\\view\\seek\\view.js",
            "line": 1,
            "description": "Displays seek form."
        },
        "chess.view.user.Controller": {
            "name": "chess.view.user.Controller",
            "shortname": "chess.view.user.Controller",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "submodule": "User",
            "namespace": "chess.view.user",
            "file": "..\\api\\src\\view\\user\\controller.js",
            "line": 1,
            "description": "Controller for the user login/registration module"
        },
        "chess.view.user.Country": {
            "name": "chess.view.user.Country",
            "shortname": "chess.view.user.Country",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "submodule": "User",
            "namespace": "chess.view.user",
            "file": "..\\api\\src\\view\\user\\country.js",
            "line": 1,
            "description": "Country input field for the user profile form"
        },
        "chess.view.user.LoginButton": {
            "name": "chess.view.user.LoginButton",
            "shortname": "chess.view.user.LoginButton",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "submodule": "User",
            "namespace": "chess.view.user",
            "file": "..\\api\\src\\view\\user\\login-button.js",
            "line": 1,
            "description": "Login button. This button will be hidden automatically when\na valid user-session is created. It will be shown when there isn't\na valid user session."
        },
        "chess.view.user.LoginWindow": {
            "name": "chess.view.user.LoginWindow",
            "shortname": "chess.view.user.LoginWindow",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "submodule": "User",
            "namespace": "chess.view.user",
            "file": "..\\api\\src\\view\\user\\login-window.js",
            "line": 1,
            "description": "Login dialog."
        },
        "chess.view.user.LogoutButton": {
            "name": "chess.view.user.LogoutButton",
            "shortname": "chess.view.user.LogoutButton",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "submodule": "User",
            "namespace": "chess.view.user",
            "file": "..\\api\\src\\view\\user\\logout-button.js",
            "line": 1,
            "description": "Log out button. This button is hidden when there are no valid\nuser sessions. It will be shown when a valid user session exists."
        },
        "chess.view.user.Panel": {
            "name": "chess.view.user.Panel",
            "shortname": "chess.view.user.Panel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "submodule": "User",
            "namespace": "chess.view.user",
            "file": "..\\api\\src\\view\\user\\panel.js",
            "line": 1,
            "description": "Small user info panel."
        },
        "chess.view.user.ProfileWindow": {
            "name": "chess.view.user.ProfileWindow",
            "shortname": "chess.view.user.ProfileWindow",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "submodule": "User",
            "namespace": "chess.view.user",
            "file": "..\\api\\src\\view\\user\\profile-window.js",
            "line": 1,
            "description": "User profile dialog"
        },
        "chess.view.user.RegisterButton": {
            "name": "chess.view.user.RegisterButton",
            "shortname": "chess.view.user.RegisterButton",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "submodule": "User",
            "namespace": "chess.view.user",
            "file": "..\\api\\src\\view\\user\\register-button.js",
            "line": 1,
            "description": "\"Register\" button. This button is shown when there's no valid user session.\nIf a valid user session exists, it will be hidden. This button fires a click\nevent which is picked up by chess.view.user.Controller."
        },
        "chess.view.user.RegisterWindow": {
            "name": "chess.view.user.RegisterWindow",
            "shortname": "chess.view.user.RegisterWindow",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "submodule": "User",
            "namespace": "chess.view.user",
            "file": "..\\api\\src\\view\\user\\register-window.js",
            "line": 1,
            "description": "User registration window."
        },
        "chess.view.user.SettingsButton": {
            "name": "chess.view.user.SettingsButton",
            "shortname": "chess.view.user.SettingsButton",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "namespace": "chess.view.user",
            "file": "..\\api\\src\\view\\user\\settings-button.js",
            "line": 1,
            "description": "User settings button. This button looks like a gear and will fire a \"click\" event\nwhich is picked up by chess.view.user.Controller. The controller will handle the event\nand fire a \"showProfile\" event which is picked up by chess.view.user.ProfileWindow.\nchess.view.user.ProfileWindow will show it's self when this event is fired.",
            "extends": "form.Button"
        },
        "chess.view.user.UserModel": {
            "name": "chess.view.user.UserModel",
            "shortname": "chess.view.user.UserModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "namespace": "chess.view.user",
            "file": "..\\api\\src\\view\\user\\user-model.js",
            "line": 1,
            "description": "Model for a user session",
            "extends": "model.Model"
        }
    },
    "classitems": [
        {
            "file": "..\\api\\src\\controller\\controller.js",
            "line": 84,
            "description": "New game dialog event",
            "itemtype": "event",
            "name": "newGameDialog",
            "class": "chess.controller.Controller",
            "module": "Controller",
            "namespace": "chess.controller"
        },
        {
            "file": "..\\api\\src\\controller\\controller.js",
            "line": 145,
            "description": "Select a database",
            "itemtype": "method",
            "name": "selectDatabase",
            "params": [
                {
                    "name": "database",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "chess.controller.Controller",
            "module": "Controller",
            "namespace": "chess.controller"
        },
        {
            "file": "..\\api\\src\\controller\\controller.js",
            "line": 152,
            "description": "Select database event",
            "itemtype": "event",
            "name": "selectDatabase",
            "params": [
                {
                    "name": "database",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "chess.controller.Controller",
            "module": "Controller",
            "namespace": "chess.controller"
        },
        {
            "file": "..\\api\\src\\controller\\controller.js",
            "line": 159,
            "description": "Load next game in selected database. This method will only work if you have\na grid with list of games. The only thing this method does is to fire the \"nextGame\"\nevent which the list of games grid listens to. The grid will go to next game and fire it's\nselectGame event",
            "itemtype": "method",
            "name": "loadNextGame",
            "return": {
                "description": "undefined"
            },
            "class": "chess.controller.Controller",
            "module": "Controller",
            "namespace": "chess.controller"
        },
        {
            "file": "..\\api\\src\\controller\\controller.js",
            "line": 168,
            "description": "next game event",
            "itemtype": "event",
            "name": "nextGame",
            "class": "chess.controller.Controller",
            "module": "Controller",
            "namespace": "chess.controller"
        },
        {
            "file": "..\\api\\src\\controller\\controller.js",
            "line": 175,
            "description": "Load previous game from selected database. For info, see loadNextGame",
            "itemtype": "method",
            "name": "loadPreviousGame",
            "return": {
                "description": "undefined"
            },
            "class": "chess.controller.Controller",
            "module": "Controller",
            "namespace": "chess.controller"
        },
        {
            "file": "..\\api\\src\\controller\\controller.js",
            "line": 218,
            "description": "Flip board. The only thing this method does is to fire the flipBoard event.",
            "itemtype": "method",
            "name": "flipBoard",
            "return": {
                "description": "undefined"
            },
            "class": "chess.controller.Controller",
            "module": "Controller",
            "namespace": "chess.controller"
        },
        {
            "file": "..\\api\\src\\controller\\controller.js",
            "line": 224,
            "description": "flip event. A board is example of a view listening to this event. When it's fired, the board\nwill be flipped",
            "itemtype": "event",
            "name": "flip",
            "class": "chess.controller.Controller",
            "module": "Controller",
            "namespace": "chess.controller"
        },
        {
            "file": "..\\api\\src\\controller\\controller.js",
            "line": 232,
            "description": "Add a move to current model",
            "itemtype": "method",
            "name": "addMove",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "undefined"
            },
            "class": "chess.controller.Controller",
            "module": "Controller",
            "namespace": "chess.controller"
        },
        {
            "file": "..\\api\\src\\controller\\controller.js",
            "line": 253,
            "description": "Event fired when the Comment before a move dialog should be shown.",
            "itemtype": "event",
            "name": "commentBefore",
            "params": [
                {
                    "name": "currentModel",
                    "description": "",
                    "type": "chess.model.Game"
                },
                {
                    "name": "move",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "chess.controller.Controller",
            "module": "Controller",
            "namespace": "chess.controller"
        },
        {
            "file": "..\\api\\src\\controller\\controller.js",
            "line": 263,
            "description": "Event fired when the Comment after a move dialog should be shown.",
            "itemtype": "event",
            "name": "commentAfter",
            "params": [
                {
                    "name": "currentModel",
                    "description": "",
                    "type": "chess.model.Game"
                },
                {
                    "name": "move",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "chess.controller.Controller",
            "module": "Controller",
            "namespace": "chess.controller"
        },
        {
            "file": "..\\api\\src\\controller\\controller.js",
            "line": 277,
            "description": "Go to start of current game",
            "itemtype": "method",
            "name": "toStart",
            "return": {
                "description": "undefined"
            },
            "class": "chess.controller.Controller",
            "module": "Controller",
            "namespace": "chess.controller"
        },
        {
            "file": "..\\api\\src\\controller\\controller.js",
            "line": 285,
            "description": "Go to end of current game",
            "itemtype": "method",
            "name": "toEnd",
            "return": {
                "description": "undefined"
            },
            "class": "chess.controller.Controller",
            "module": "Controller",
            "namespace": "chess.controller"
        },
        {
            "file": "..\\api\\src\\controller\\controller.js",
            "line": 293,
            "description": "Go to previous move",
            "itemtype": "method",
            "name": "previousMove",
            "return": {
                "description": "undefined"
            },
            "class": "chess.controller.Controller",
            "module": "Controller",
            "namespace": "chess.controller"
        },
        {
            "file": "..\\api\\src\\controller\\controller.js",
            "line": 301,
            "description": "Go to next move",
            "itemtype": "method",
            "name": "nextMove",
            "return": {
                "description": "undefined"
            },
            "class": "chess.controller.Controller",
            "module": "Controller",
            "namespace": "chess.controller"
        },
        {
            "file": "..\\api\\src\\controller\\controller.js",
            "line": 309,
            "description": "Start auto play of moves in current game from current position",
            "itemtype": "method",
            "name": "playMoves",
            "return": {
                "description": "undefined"
            },
            "class": "chess.controller.Controller",
            "module": "Controller",
            "namespace": "chess.controller"
        },
        {
            "file": "..\\api\\src\\controller\\controller.js",
            "line": 317,
            "description": "Pause auto play of moves",
            "itemtype": "method",
            "name": "pauseGame",
            "return": {
                "description": "undefined"
            },
            "class": "chess.controller.Controller",
            "module": "Controller",
            "namespace": "chess.controller"
        },
        {
            "file": "..\\api\\src\\controller\\controller.js",
            "line": 396,
            "description": "Return active game",
            "itemtype": "method",
            "name": "getCurrentModel",
            "return": {
                "description": "object chess.model.Game"
            },
            "class": "chess.controller.Controller",
            "module": "Controller",
            "namespace": "chess.controller"
        },
        {
            "file": "..\\api\\src\\controller\\tactic-controller.js",
            "line": 24,
            "description": "True to always play starting color in game. Otherwise, you will play black\nif black is the winning color and white if white is the winning color. If\nno winner is registered in the game(result or by calculating final position),\nyou will play white",
            "itemtype": "config",
            "name": "alwaysPlayStartingColor",
            "type": "{Boolean}",
            "default": "false",
            "class": "chess.controller.TacticController",
            "module": "Controller",
            "namespace": "chess.controller"
        },
        {
            "file": "..\\api\\src\\controller\\tactic-controller.js",
            "line": 125,
            "description": "Load random game from current database",
            "itemtype": "method",
            "name": "loadRandomGame",
            "return": {
                "description": "void"
            },
            "class": "chess.controller.TacticController",
            "module": "Controller",
            "namespace": "chess.controller"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 12,
            "itemtype": "attribute",
            "name": "moveParser",
            "type": "chess.parser.FenParser0x88",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 34,
            "description": "id of initial game to load from server.",
            "itemtype": "config",
            "name": "id",
            "type": "{Number}",
            "default": "undefined",
            "optional": 1,
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 68,
            "description": "Returns game id",
            "itemtype": "method",
            "name": "getId",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 77,
            "description": "Load a game from server",
            "itemtype": "method",
            "name": "loadGame",
            "params": [
                {
                    "name": "gameId",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 89,
            "description": "Load a random game from selected database",
            "itemtype": "method",
            "name": "loadRandomGame",
            "params": [
                {
                    "name": "databaseId",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 108,
            "description": "Returns true if this model is model for given game object",
            "itemtype": "method",
            "name": "isModelFor",
            "params": [
                {
                    "name": "game",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 119,
            "description": "Empty model and reset to standard position",
            "itemtype": "method",
            "name": "newGame",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 126,
            "description": "Activate model. This will fire newGame and setPosition events",
            "itemtype": "method",
            "name": "activate",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 131,
            "description": "new game event. Fired when a new model is created or an old model is activated",
            "itemtype": "event",
            "name": "newGame",
            "params": [
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "chess.model.Game"
                }
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 138,
            "description": "Fired when current chess position is changed, example by moving to a different move",
            "itemtype": "event",
            "name": "setPosition",
            "params": [
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "chess.model.Game"
                }
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 147,
            "description": "Create new game from given fen position",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "fen",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 155,
            "description": "Fired when there are no moves in the game",
            "itemtype": "event",
            "name": "noMoves",
            "params": [
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "chess.model.Game"
                }
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 166,
            "description": "Populate game model by JSON game object. This method will create a new game.",
            "itemtype": "method",
            "name": "populate",
            "params": [
                {
                    "name": "gameData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 192,
            "description": "Move metadata into metadata object",
            "itemtype": "method",
            "name": "getValidMetadata",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 210,
            "description": "Return game data",
            "itemtype": "method",
            "name": "getModel",
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 220,
            "description": "Parse and index moves received from the server, i.e. the populate method",
            "itemtype": "method",
            "name": "registerMoves",
            "params": [
                {
                    "name": "moves",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "pos",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "parent",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "optional": 1,
            "access": "private",
            "tagname": "",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 257,
            "description": "Store internal reference to previous move",
            "itemtype": "method",
            "name": "registerPreviousMap",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "chess.model.Move"
                },
                {
                    "name": "previous",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 267,
            "description": "Store internal reference to parent move",
            "itemtype": "method",
            "name": "registerParentMap",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "chess.model.Move"
                },
                {
                    "name": "parent",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 278,
            "description": "Store internal link between move and a branch of moves(Main line or variation)",
            "itemtype": "method",
            "name": "registerBranchMap",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "chess.model.Move"
                },
                {
                    "name": "branch",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 289,
            "description": "Return branch/line of current move, i.e. main line or variation",
            "itemtype": "method",
            "name": "getBranch",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 300,
            "description": "Reset model data to default, blank game",
            "itemtype": "method",
            "name": "setDefaultModel",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 318,
            "description": "Update game information",
            "itemtype": "method",
            "name": "setMetadata",
            "params": [
                {
                    "name": "metadata",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\tmodel.setMetadata({white:'John','black:'Jane'});"
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 332,
            "description": "Update particular info about the game",
            "itemtype": "method",
            "name": "setMetadataValue",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tmodel.setMetadataValue('white','John');"
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 342,
            "description": "Fired when metadata is updated",
            "itemtype": "event",
            "name": "updateMetadata",
            "params": [
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "chess.model.Game"
                },
                {
                    "name": "metadata,",
                    "description": "example {key:'white','value':'John'}",
                    "type": "Object"
                }
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 353,
            "description": "Return all game metadata info",
            "itemtype": "method",
            "name": "getMetadata",
            "return": {
                "description": "",
                "type": "Object"
            },
            "example": [
                "\n        var m = model.getMetadata();\n     returns an object like",
                "\n        { \"white\": \"Magnus Carlsen\", \"black\": \"Levon Aronian\", \"Result\" : \"1-0\" }"
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 366,
            "description": "Return a specific metadata key",
            "itemtype": "method",
            "name": "getMetadataValue",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "value",
                "type": "String"
            },
            "example": [
                "\n\tvar whitePlayer = model.getMetadataValue('white');"
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 378,
            "description": "Return array of moves in game",
            "itemtype": "method",
            "name": "getMoves",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 387,
            "description": "Return start position of game",
            "itemtype": "method",
            "name": "getStartPosition",
            "return": {
                "description": "position",
                "type": "String"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 396,
            "description": "Try to guess next move in a game",
            "itemtype": "method",
            "name": "tryNextMove",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "correctMove",
                "type": "Boolean"
            },
            "example": [
                "\n\t \tvar correctMove = model.tryNextMove({\n\t \t\tfrom:'e7',\n\t \t\tto:'e8',\n\t \t\tpromoteTo:'queen'\n\t \t});"
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 433,
            "description": "Returns true if passed guess matches next move",
            "itemtype": "method",
            "name": "isCorrectGuess",
            "params": [
                {
                    "name": "guess",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "nextMove",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 457,
            "description": "Return result of game, either from metadata(\"result\") or by trying to calculate final\nposition. Return value will be 1 for white win, -1 for black win. 0.5 for draw and 0 for\nundecided.",
            "itemtype": "method",
            "name": "getResult",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 488,
            "description": "Returns true if user can claim draw in current position",
            "itemtype": "method",
            "name": "canClaimDraw",
            "return": {
                "description": "can claim draw",
                "type": "Boolean"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 497,
            "description": "Returns array of all FEN's in main line(Not variations)",
            "itemtype": "method",
            "name": "getAllFens",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 511,
            "description": "Return last move in game",
            "itemtype": "method",
            "name": "getLastMoveInGame",
            "return": {
                "description": "move",
                "type": "chess.model.Move|undefined"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 523,
            "description": "Return last position in game",
            "itemtype": "method",
            "name": "getLastPositionInGame",
            "return": {
                "description": "fen",
                "type": "String"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 536,
            "description": "Returns array of remaining moves",
            "itemtype": "method",
            "name": "getAllNextMoves",
            "params": [
                {
                    "name": "nextOf",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 562,
            "description": "Append move to the model",
            "itemtype": "method",
            "name": "appendMove",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "chess.model.Move|String"
                }
            ],
            "return": {
                "description": "success",
                "type": "Boolean"
            },
            "example": [
                "\n\tvar model = new chess.model.Game();\n\tmodel.appendMove({ 'from': 'e2', 'to' : 'e4' }); // Using objects\n\tmodel.appendMove('e7'); // Using notation\n\talert(model.getCurrentPosition());"
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 579,
            "description": "verify promotion event. This event is fired when you try to append a promotion move\nwhere the promoteTo info is missing",
            "itemtype": "event",
            "name": "verifyPromotion",
            "params": [
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "chess.model.Game"
                },
                {
                    "name": "appendedMove",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 600,
            "description": "Fired when appending a move in the middle of a game. This method sends a message to the controller\nsaying that it needs to know if appended move should be added as variation or if it should overwrite\ncurrent next move",
            "itemtype": "event",
            "name": "overwriteOrVariation",
            "params": [
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "chess.model.Game"
                },
                {
                    "name": "newMove,",
                    "description": "nextMove",
                    "type": "Object"
                }
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 620,
            "description": "Fired when a new move is appended to the game.",
            "itemtype": "event",
            "name": "newMove",
            "params": [
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "chess.model.Game"
                },
                {
                    "name": "appendedMove",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 628,
            "description": "Fired when current move is last move in branch, either last move in game or last move inside a variation.",
            "itemtype": "event",
            "name": "endOfBranch",
            "params": [
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "chess.model.Game"
                }
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 636,
            "description": "Fired when current move is last move in game.",
            "itemtype": "event",
            "name": "endOfBranch",
            "params": [
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "chess.model.Game"
                }
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 646,
            "description": "Fired when you try to append an invalid move to the game",
            "itemtype": "event",
            "name": "endOfBranch",
            "params": [
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "chess.model.Game"
                },
                {
                    "name": "move",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 659,
            "description": "Overwrite a move with a different move. oldMove has to be a\nmove in the game. When found, this move and all following move will be deleted\nand the new move will be appended.",
            "itemtype": "method",
            "name": "overwriteMove",
            "params": [
                {
                    "name": "oldMove",
                    "description": "",
                    "type": "chess.model.Move"
                },
                {
                    "name": "newMove",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 675,
            "description": "Returns valid chess.model.Move object for a move",
            "itemtype": "method",
            "name": "getValidMove",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "Object|chess.model.Move"
                },
                {
                    "name": "pos",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "chess.model.Move"
            },
            "access": "private",
            "tagname": "",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 690,
            "description": "Add a new move as a variation. If current move is already first move in variation it will go to this move\nand not create a new variation. This method will\nfire the events \"newVariation\", \"newMove\" and \"endOfBranch\" on success.\n\"invalidMove\" will be fired on invalid move.",
            "itemtype": "method",
            "name": "newVariation",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "return": {
                "description": "undefined"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 715,
            "description": "Fired after creating a new variation",
            "itemtype": "event",
            "name": "newVariation",
            "params": [
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "chess.model.Game"
                },
                {
                    "name": "parentMove",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 732,
            "description": "Returns true when trying to create variation and passed move is next move in line",
            "itemtype": "method",
            "name": "isDuplicateVariationMove",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 742,
            "description": "Returns true if current move already has a variation starting with given move",
            "itemtype": "method",
            "name": "getDuplicateVariationMove",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "return": {
                "description": "",
                "type": "chess.model.Move|undefined"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 762,
            "description": "Create new variation branch",
            "itemtype": "method",
            "name": "newVariationBranch",
            "access": "private",
            "tagname": "",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 774,
            "description": "Returns fen of current move or start of game fen",
            "itemtype": "method",
            "name": "getCurrentPosition",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 786,
            "description": "Returns fen of previous move or start of game fen",
            "itemtype": "method",
            "name": "getPreviousPosition",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 803,
            "description": "Delete a move. This method will fire the deleteMove and endOfBranch events. If deleted move is in\nmain line, the endOfGame event will also be fired. The event \"noMoves\" will be fired if the deleted move\nis the first move in the game. \"deleteVariation\" will be fired if the deleted move is the first move\nin a variation.",
            "itemtype": "method",
            "name": "deleteMove",
            "params": [
                {
                    "name": "moveToDelete",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 818,
            "description": "Special event not yet implemented. Supporting for adding info to games such as video links, automatic start and stop\nof auto play for lecture purpose will be added as actions later.",
            "itemtype": "event",
            "name": "deleteAction",
            "params": [
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "chess.model.Game"
                },
                {
                    "name": "move",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 828,
            "description": "Fired when a move is deleted. It will only be fired for one move and not the following moves which of course\nalso will be deleted.",
            "itemtype": "event",
            "name": "deleteMove",
            "params": [
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "chess.model.Game"
                },
                {
                    "name": "deleted",
                    "description": "move",
                    "type": "chess.model.Move"
                }
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 841,
            "description": "Fired when going to a move which is not last move in game",
            "itemtype": "event",
            "name": "notEndOfGame",
            "params": [
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "chess.model.Game"
                }
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 864,
            "description": "true if given move is last move in current variation, i.e. the variation active on the board",
            "itemtype": "method",
            "name": "isLastMoveInVariation",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 880,
            "description": "true if move displayed on board, i.e. current model move is last move in game.",
            "itemtype": "method",
            "name": "isAtEndOfGame",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 892,
            "description": "Returns true if there are moves left in branch",
            "itemtype": "method",
            "name": "hasMovesInBranch",
            "params": [
                {
                    "name": "branch",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 911,
            "description": "Delete moves from branch, i.e. main line or variation",
            "itemtype": "method",
            "name": "clearMovesInBranch",
            "params": [
                {
                    "name": "branch",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "fromIndex",
                    "description": "",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 925,
            "itemtype": "method",
            "name": "findMove",
            "params": [
                {
                    "name": "moveToFind",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "return": {
                "description": "",
                "type": "chess.model.Move"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 934,
            "description": "Delete current move reference. This method is called when creating a new game and when first\nmove in the game is deleted",
            "itemtype": "method",
            "name": "clearCurrentMove",
            "access": "private",
            "tagname": "",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 946,
            "description": "Go to a specific move.",
            "itemtype": "method",
            "name": "goToMove",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 957,
            "description": "Back up x number of moves",
            "itemtype": "method",
            "name": "back",
            "params": [
                {
                    "name": "numberOfMoves",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1001,
            "description": "Call goToMove for current move and trigger the events. This method is called when\noverwrite of move is cancelled from game editor and when you're guessing the wrong move\nin a tactic puzzle",
            "itemtype": "method",
            "name": "resetPosition",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1014,
            "itemtype": "method",
            "name": "setCurrentMove",
            "params": [
                {
                    "name": "newCurrentMove",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "return": {
                "description": "success",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1041,
            "description": "Return color to move, \"white\" or \"black\"",
            "itemtype": "method",
            "name": "getColorToMove",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1052,
            "description": "Returns current move, i.e. last played move",
            "itemtype": "method",
            "name": "getCurrentMove",
            "return": {
                "description": "",
                "type": "chess.model.Move"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1061,
            "description": "Return branch, i.e. main line or variation of current move",
            "itemtype": "method",
            "name": "getCurrentBranch",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1070,
            "description": "Go to previous move",
            "itemtype": "method",
            "name": "previousMove",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1084,
            "description": "Go to next move",
            "itemtype": "method",
            "name": "nextMove",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1101,
            "description": "Go to start of game",
            "itemtype": "method",
            "name": "toStart",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1118,
            "description": "Go to last move in game",
            "itemtype": "method",
            "name": "toEnd",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1131,
            "description": "Go to last move in current branch, i.e. main line or variation",
            "itemtype": "method",
            "name": "toEndOfCurrentBranch",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1147,
            "description": "Returns rue if current move is set",
            "itemtype": "method",
            "name": "hasCurrentMove",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1156,
            "description": "Return first move in game",
            "itemtype": "method",
            "name": "getFirstMoveInGame",
            "return": {
                "description": "",
                "type": "chess.model.Move"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1171,
            "description": "Return parent move of given move, i.e. parent move of a move in a variation.",
            "itemtype": "method",
            "name": "getParentMove",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "chess.model.Move|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "chess.model.Move|undefined"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1185,
            "description": "Returns previous move in same branch/line or undefined",
            "itemtype": "method",
            "name": "getPreviousMoveInBranch",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "return": {
                "description": "",
                "type": "chess.model.Move|undefined"
            },
            "access": "private",
            "tagname": "",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1210,
            "description": "Returns previous move in same branch or parent branch",
            "itemtype": "method",
            "name": "getPreviousMove",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "chess.model.Move"
                },
                {
                    "name": "includeComments",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "optional": 1,
            "return": {
                "description": "",
                "type": "chess.model.Move|undefined"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1252,
            "description": "Get next move of",
            "itemtype": "method",
            "name": "getNextMove",
            "params": [
                {
                    "name": "nextOf",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "return": {
                "description": "next move",
                "type": "chess.model.Move|undefined"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1282,
            "description": "Add action as a move. Actions are not fully implemented. When implemented, it will add supports for\ninteractive chess games, example: start and stop autoplay. Display comments, videos or audio etc.",
            "itemtype": "method",
            "name": "addAction",
            "params": [
                {
                    "name": "action",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1300,
            "description": "Grade a move",
            "itemtype": "method",
            "name": "gradeMove",
            "params": [
                {
                    "name": "move",
                    "description": ""
                },
                {
                    "name": "grade",
                    "description": ""
                }
            ],
            "example": [
                "\n\t \tmodel.gradeMove(model.getCurrentMove(), '!');\n\t \t...\n\t \t...\n\t \tmodel.gradeMove(model.getCurrentMove(), '??');"
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1325,
            "description": "Internally index a move",
            "itemtype": "method",
            "name": "registerMove",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "chess.model.Move"
                },
                {
                    "name": "atIndex",
                    "description": "",
                    "type": "Number"
                }
            ],
            "optional": 1,
            "access": "private",
            "tagname": "",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1353,
            "description": "Insert space for new move in a branch at index",
            "itemtype": "method",
            "name": "insertSpacerInBranch",
            "params": [
                {
                    "name": "branch",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "atIndex",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1370,
            "description": "Return comment before move, i.e. get comment of previous move",
            "itemtype": "method",
            "name": "getCommentBefore",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "return": {
                "description": "comment",
                "type": "String"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1386,
            "description": "Get comment of current move",
            "itemtype": "method",
            "name": "getCommentAfter",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "return": {
                "description": "comment",
                "type": "String"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1400,
            "description": "Set comment before a move, i.e. set comment of previous move, or in case of first move in game, set \"commment\" attribute of\ngame metadata.",
            "itemtype": "method",
            "name": "setCommentBefore",
            "params": [
                {
                    "name": "comment",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "move",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1428,
            "description": "Set comment after a move",
            "itemtype": "method",
            "name": "setCommentAfter",
            "params": [
                {
                    "name": "comment",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "move",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1441,
            "description": "Set comment property of a move",
            "itemtype": "method",
            "name": "setComment",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "chess.model.Move"
                },
                {
                    "name": "comment",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1452,
            "description": "Returns true if passed move is a valid chess move",
            "itemtype": "method",
            "name": "isChessMove",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1463,
            "itemtype": "method",
            "name": "fire",
            "params": [
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "param",
                    "description": "",
                    "type": "Object|chess.model.Move"
                }
            ],
            "optional": 1,
            "access": "private",
            "tagname": "",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1478,
            "description": "Start auto play of moves",
            "itemtype": "method",
            "name": "startAutoPlay",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1487,
            "description": "Stop auto play of moves",
            "itemtype": "method",
            "name": "startAutoPlay",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1496,
            "description": "Auto play next move",
            "itemtype": "method",
            "name": "nextAutoPlayMove",
            "access": "private",
            "tagname": "",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1512,
            "description": "Returns true if in auto play mode",
            "itemtype": "method",
            "name": "isInAutoPlayMode",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1521,
            "description": "Return database id of game",
            "itemtype": "method",
            "name": "getDatabaseId",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1530,
            "description": "Set dirty flag to true, i.e. game has been changed but not saved.",
            "itemtype": "method",
            "name": "setDirty",
            "access": "private",
            "tagname": "",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1537,
            "description": "Event fired when model is changed but not saved",
            "itemtype": "event",
            "name": "dirty",
            "params": [
                {
                    "name": "this",
                    "description": "",
                    "type": "chess.model.Game"
                }
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1544,
            "description": "Set dirty flag to false, i.e. game has been changed and saved",
            "itemtype": "method",
            "name": "setClean",
            "access": "private",
            "tagname": "",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1551,
            "description": "Event fired when model is clean, i.e. right after being saved to the server.",
            "itemtype": "event",
            "name": "dirty",
            "params": [
                {
                    "name": "this",
                    "description": "",
                    "type": "chess.model.Game"
                }
            ],
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1559,
            "description": "Return dirty flag. dirty flag is set to true when game has been changed, but not saved.",
            "itemtype": "method",
            "name": "isDirty",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1568,
            "description": "Save model to server",
            "itemtype": "method",
            "name": "save",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1576,
            "description": "Convert to valid server model, i.e. reserved metadata moved from metadata object",
            "itemtype": "method",
            "name": "toValidServerModel",
            "params": [
                {
                    "name": "gameData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\game.js",
            "line": 1596,
            "description": "Receive game update from server",
            "itemtype": "method",
            "name": "updateGameFromServer",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "chess.model.Game",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\move.js",
            "line": 8,
            "description": "from square, example \"e2\"",
            "itemtype": "property",
            "name": "from",
            "type": "String",
            "example": [
                "\n\t\t {\n\t\t\t from:'e7',\n\t\t\t to:'e8',\n\t\t\t promoteTo:'queen',\n\t\t\t comment:'My comment',\n\t\t\t m:'e8=Q',\n\t\t\t lm:'e7-e8=Q'\n\t\t }"
            ],
            "class": "chess.model.Move",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\move.js",
            "line": 24,
            "description": "to square, example \"e4\"",
            "itemtype": "property",
            "name": "to",
            "type": "String",
            "example": [
                "\n\t\"to\" : \"e4\""
            ],
            "class": "chess.model.Move",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\move.js",
            "line": 33,
            "description": "Promotion info",
            "itemtype": "property",
            "name": "promoteTo",
            "type": "String",
            "optional": 1,
            "example": [
                "\n\t\"promoteTo\": \"queen\""
            ],
            "class": "chess.model.Move",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\move.js",
            "line": 43,
            "description": "Short notation",
            "itemtype": "property",
            "name": "m",
            "type": "String",
            "example": [
                "\n\tm: 'e4'"
            ],
            "class": "chess.model.Move",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\move.js",
            "line": 51,
            "description": "Long notation",
            "itemtype": "property",
            "name": "lm",
            "type": "String",
            "optional": 1,
            "example": [
                "\n\tlm: 'e2-e4'"
            ],
            "class": "chess.model.Move",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\move.js",
            "line": 60,
            "description": "Comment",
            "itemtype": "property",
            "name": "comment",
            "type": "String",
            "optional": 1,
            "example": [
                "\n\t\"comment\":\"This is my comment\""
            ],
            "class": "chess.model.Move",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\move.js",
            "line": 70,
            "description": "Array of variations. Each item in the array is an array of moves in that variation.",
            "itemtype": "property",
            "name": "variations",
            "type": "Array",
            "optional": 1,
            "class": "chess.model.Move",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\move.js",
            "line": 78,
            "description": "Action - To be implemented",
            "itemtype": "property",
            "name": "action",
            "type": "String",
            "optional": 1,
            "example": [
                "\n\t\"action\": \"startAutoPlay\""
            ],
            "class": "chess.model.Move",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\move.js",
            "line": 88,
            "description": "Internal move index property",
            "itemtype": "property",
            "name": "index",
            "type": "Number",
            "class": "chess.model.Move",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\model\\move.js",
            "line": 95,
            "description": "Internal id property",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "class": "chess.model.Move",
            "module": "Model",
            "namespace": "chess.model"
        },
        {
            "file": "..\\api\\src\\parser0x88\\fen-parser-0x88.js",
            "line": 20,
            "description": "Set a new position",
            "itemtype": "method",
            "name": "setFen",
            "params": [
                {
                    "name": "fen",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "chess.parser.FenParser0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\fen-parser-0x88.js",
            "line": 58,
            "description": "Parses current fen and stores board information internally",
            "itemtype": "method",
            "name": "parseFen",
            "class": "chess.parser.FenParser0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\fen-parser-0x88.js",
            "line": 99,
            "description": "Return all pieces on board",
            "itemtype": "method",
            "name": "getPieces",
            "return": {
                "description": "pieces",
                "type": "Array"
            },
            "class": "chess.parser.FenParser0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\fen-parser-0x88.js",
            "line": 108,
            "description": "Return king of a color",
            "itemtype": "method",
            "name": "getKing",
            "params": [
                {
                    "name": "color",
                    "description": ""
                }
            ],
            "return": {
                "description": "king",
                "type": "Object"
            },
            "example": [
                "\n\t\tvar fen = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\n\t\tvar parser = new chess.parser.FenParser0x88(fen);\n\t\tconsole.log(parser.getKing('white'));\nreturns an object containing the properties s for square and t for type.\nboth are numeric according to the 0x88 board."
            ],
            "class": "chess.parser.FenParser0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\fen-parser-0x88.js",
            "line": 124,
            "description": "Returns pieces of a color",
            "itemtype": "method",
            "name": "getPiecesOfAColor",
            "params": [
                {
                    "name": "color",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "example": [
                "\n\tvar parser = new chess.parser.FenParser0x88('5k2/8/8/3pP3/8/8/8/7K w - d6 0 1');\n\tvar pieces = parser.getPiecesOfAColor('white');\n\tconsole.log(pieces);\neach piece is represented by an object like this:",
                "\n\t{\n\t\ts : 112,\n\t\tt : 14\n\t}\nwhere s is square and type is type. s is numeric according to the 0x88 chess board where\na1 is 0, a2 is 16, b2 is 17, a3 is 32, i.e. a 128x64 square board.\n\nt is a numeric representation(4 bits).",
                "\n\t\t P : 0001\n\t\t N : 0010\n\t\t K : 0011\n\t\t B : 0101\n\t\t R : 0110\n\t\t Q : 0111\n\t\t p : 1001\n\t\t n : 1010\n\t\t k : 1011\n\t\t b : 1101\n\t\t r : 1100\n\t\t q : 1100\n\nAs you can see, black pieces all have the first bit set to 1, and all the sliding pieces\n(bishop, rook and queen) has the second bit set to 1. This makes it easy to to determine color\nand sliding pieces using the bitwise & operator."
            ],
            "class": "chess.parser.FenParser0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\fen-parser-0x88.js",
            "line": 165,
            "itemtype": "method",
            "name": "getEnPassantSquare",
            "return": {
                "description": "",
                "type": "String|null"
            },
            "example": [
                "\n\tvar fen = '5k2/8/8/3pP3/8/8/8/7K w - d6 0 1';\n\tvar parser = new chess.parser.FenParser0x88(fen);\n\talert(parser.getEnPassantSquare()); // alerts 'd6'"
            ],
            "class": "chess.parser.FenParser0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\fen-parser-0x88.js",
            "line": 214,
            "description": "Return information about piece on square in human readable format",
            "itemtype": "method",
            "name": "getPieceOnSquare",
            "params": [
                {
                    "name": "square",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "example": [
                "\n\tvar fen = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\n\tvar parser = new chess.parser.FenParser0x88(fen);\n\tconsole.log(parser.getPieceOnSquare('e2'));\nwill return an object like this:",
                "\n\t{\n\t\t\"square\": \"e2\",\n\t\t\"type\": \"pawn\",\n\t\t\"color\": \"white\",\n\t\t\"sliding\": 0\n\t}"
            ],
            "class": "chess.parser.FenParser0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\fen-parser-0x88.js",
            "line": 248,
            "description": "Returns true if two squares are on the same rank. Squares are in the 0x88 format, i.e.\na1=0,a2=16. You can use Board0x88Config.mapping to get a more readable code.",
            "itemtype": "method",
            "name": "isOnSameRank",
            "params": [
                {
                    "name": "square1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "square2",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "example": [
                "\n\t \tvar parser = new chess.parser.FenParser0x88();\n\t \tconsole.log(parser.isOnSameSquare(0,16)); // a1 and a2 -> false\n\t \tconsole.log(parser.isOnSameSquare(0,1)); // a1 and b1 -> true"
            ],
            "class": "chess.parser.FenParser0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\fen-parser-0x88.js",
            "line": 264,
            "description": "Returns true if two squares are on the same file. Squares are in the 0x88 format, i.e.\na1=0,a2=16. You can use Board0x88Config.mapping to get a more readable code.",
            "itemtype": "method",
            "name": "isOnSameFile",
            "params": [
                {
                    "name": "square1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "square2",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "example": [
                "\n\t \tvar parser = new chess.parser.FenParser0x88();\n\t \tconsole.log(parser.isOnSameFile(0,16)); // a1 and a2 -> true\n\t \tconsole.log(parser.isOnSameFile(0,1)); // a1 and b1 -> false"
            ],
            "class": "chess.parser.FenParser0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\fen-parser-0x88.js",
            "line": 280,
            "description": "Returns valid moves and results for the position according to the 0x88 chess programming\nalgorithm where position on the board is numeric (A1=0,H1=7,A2=16,H2=23,A3=32,A4=48).\nFirst rank is numbered 0-7. Second rank starts at first rank + 16, i.e. A2 = 16. Third\nrank starts at second rank + 16, i.e. A3 = 32 and so on.",
            "itemtype": "method",
            "name": "getValidMovesAndResult",
            "params": [
                {
                    "name": "color",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "example": [
                "\n\t var fen = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\n\t var parser = new chess.parser.FenParser0x88(fen)\n\t console.log(parser.getValidMovesAndResult());\nreturns an object containing information about number of checks(0,1 or 2 for double check),\nvalid moves and result(0 for undecided, .5 for stalemate, -1 for black win and 1 for white win).\nmoves are returend in the following format:\n\n\tnumeric square : [array of valid squares to move]\nexample for knight on b1:",
                "\n\t1 : [32,34]\nsince it's located on b1(numeric value 1) and can move to either a3 or c3(32 and 34)."
            ],
            "class": "chess.parser.FenParser0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\fen-parser-0x88.js",
            "line": 553,
            "description": "Returns array of sliding pieces attacking king",
            "itemtype": "method",
            "name": "getSlidingPiecesAttackingKing",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "example": [
                "\n\tfen = '6k1/Q5n1/4p3/8/8/8/B7/5KR1 b - - 0 1';\n\t\tparser = new chess.parser.FenParser0x88(fen);\n\tpieces = parser.getSlidingPiecesAttackingKing('white');\n\tconsole.log(pieces);\nwill return",
                "\n\t[ { \"s\" : 16, \"p\": 17 }, { \"s\": 6, \"p\": 16 }]\nwhere \"s\" is the 0x88 board position of the piece and \"p\" is the sliding path to the king\nof opposite color. A bishop on a1 and a king on h8 will return { \"s\": \"0\", \"p\": 17 }\nThis method returns pieces even when the sliding piece is not checking king."
            ],
            "class": "chess.parser.FenParser0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\fen-parser-0x88.js",
            "line": 615,
            "description": "Return array of the squares where pieces are pinned, i.e. cannot move.\nSquares are in the 0x88 format. You can use Board0x88Config.numberToSquareMapping\nto translate to readable format, example: Board0x88Config.numberToSquareMapping[16] will give you 'a2'",
            "itemtype": "method",
            "name": "getPinned",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "example": [
                "\n\tvar fen = '6k1/Q5n1/4p3/8/8/1B6/B7/5KR1 b - - 0 1';\n\t\tvar parser = new chess.parser.FenParser0x88(fen);\n\tvar pinned = parser.getPinned('black');\n\tconsole.log(pinned);\nwill output",
                "\n \t\t{\n\t\t84: { \"by\": 33, \"direction\": 17 }, // pawn on e6(84) is pinned by bishop on b3(33).\n\t\t102 : { \"by\": \"6\", \"direction\": 16 } // knight on g7 is pinned by rook on g1\n\t}\ndirection is the path to king which can be",
                "\n\t15   16   17\n\t-1         1\n\t17  -16  -15\ni.e. 1 to the right, -1 to the left, 17 for higher rank and file etc."
            ],
            "class": "chess.parser.FenParser0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\fen-parser-0x88.js",
            "line": 799,
            "description": "Returns distance between two sqaures",
            "itemtype": "method",
            "name": "getDistance",
            "params": [
                {
                    "name": "sq1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "sq2",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "distance",
                "type": "Number"
            },
            "class": "chess.parser.FenParser0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\fen-parser-0x88.js",
            "line": 856,
            "description": "Returns true if a move is an \"en passant\" move. Move is given in this format:",
            "itemtype": "method",
            "name": "isEnPassantMove",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "example": [
                "\n\tvar move = {\n\t\tfrom: Board0x88Config.mapping['e5'],\n\t\tto: Board0x88Config.mapping['e6']\n\t}\nconsole.log(parser.isEnPassantMove(move);\n\nMove is an object and requires properties \"from\" and \"to\" which is a numeric square(according to a 0x88 board)."
            ],
            "class": "chess.parser.FenParser0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\fen-parser-0x88.js",
            "line": 881,
            "description": "Returns true if a move is a castle move. This method does not validate if the king is allowed\nto move to the designated square.",
            "itemtype": "method",
            "name": "isCastleMove",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "chess.parser.FenParser0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\fen-parser-0x88.js",
            "line": 897,
            "description": "Make a move by notation",
            "itemtype": "method",
            "name": "makeMoveByNotation",
            "params": [
                {
                    "name": "notation",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "undefined"
            },
            "example": [
                "\n\tvar parser = new chess.parser.FenParser0x88('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1');\n\tparser.makeMoveByNotation('e4');\n\tconsole.log(parser.getFen());"
            ],
            "class": "chess.parser.FenParser0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\fen-parser-0x88.js",
            "line": 911,
            "description": "Make a move by an object",
            "itemtype": "method",
            "name": "makeMove",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\tvar parser = new chess.parser.FenParser0x88('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1');\n\tparser.makeMove({from:'e2',to:'e4'});\n\tconsole.log(parser.getFen());"
            ],
            "class": "chess.parser.FenParser0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\fen-parser-0x88.js",
            "line": 925,
            "description": "Returns true when last position in the game has occured 2 or more times, i.e. 3 fold\nrepetition.(if 2, it will be 3 fold after the next move, a \"claimed\" draw).",
            "itemtype": "method",
            "name": "hasThreeFoldRepetition",
            "params": [
                {
                    "name": "fens",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "\nThis method is called from the game model where the fen of the last moves is sent.",
                "type": "Boolean"
            },
            "class": "chess.parser.FenParser0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\fen-parser-0x88.js",
            "line": 1094,
            "description": "Get from rank by notation, 0 is first rank, 16 is second rank, 32 is third rank etc.",
            "itemtype": "method",
            "name": "getFromRankByNotation",
            "params": [
                {
                    "name": "notation",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "chess.parser.FenParser0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\fen-parser-0x88.js",
            "line": 1108,
            "description": "Get from rank by notation. 0 is first file(a), 1 is second file(b), 2 is third file etc.",
            "itemtype": "method",
            "name": "getFromFileByNotation",
            "params": [
                {
                    "name": "notation",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "chess.parser.FenParser0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\fen-parser-0x88.js",
            "line": 1121,
            "description": "Return numeric destination square by notation.",
            "itemtype": "method",
            "name": "getToSquareByNotation",
            "params": [
                {
                    "name": "notation",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "square",
                "type": "Number"
            },
            "class": "chess.parser.FenParser0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\fen-parser-0x88.js",
            "line": 1343,
            "description": "Return current fen position",
            "itemtype": "method",
            "name": "getFen",
            "return": {
                "description": "fen",
                "type": "String"
            },
            "class": "chess.parser.FenParser0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\fen-parser-0x88.js",
            "line": 1355,
            "description": "Return long notation for a move",
            "itemtype": "method",
            "name": "getLongNotationForAMove",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "shortNotation",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "long notation",
                "type": "String"
            },
            "class": "chess.parser.FenParser0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\fen-parser-0x88.js",
            "line": 1382,
            "description": "Return short notation for a move",
            "itemtype": "method",
            "name": "getNotationForAMove",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "example": [
                "\n\talert(parser.getNotationForAMove({from:'g1',to:'f3'});"
            ],
            "class": "chess.parser.FenParser0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\fen-parser-0x88.js",
            "line": 1458,
            "description": "Returns new fen based on current board position",
            "itemtype": "method",
            "name": "getNewFen",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "chess.parser.FenParser0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\move-0x88.js",
            "line": 30,
            "description": "Returns true if last moves in passed fen's is threefold repetition.",
            "itemtype": "method",
            "name": "hasThreeFoldRepetition",
            "params": [
                {
                    "name": "fens",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "chess.parser.Move0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\move-0x88.js",
            "line": 40,
            "itemtype": "method",
            "name": "getMoveByNotation",
            "params": [
                {
                    "name": "notation",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "pos",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "chess.model.Move"
            },
            "class": "chess.parser.Move0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\move-0x88.js",
            "line": 51,
            "description": "Returns true if a move is valid",
            "itemtype": "method",
            "name": "isValid",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "fen",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "chess.parser.Move0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\move-0x88.js",
            "line": 75,
            "description": "Lookup mapping table and return numeric value of square according the the 0x88 chess board",
            "itemtype": "method",
            "name": "getNumSquare",
            "params": [
                {
                    "name": "square",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "chess.parser.Move0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\move-0x88.js",
            "line": 85,
            "description": "Return valid Move object",
            "itemtype": "method",
            "name": "getMoveConfig",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "fen",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "\nTODO perhaps rename this method",
                "type": "chess.model.Move"
            },
            "class": "chess.parser.Move0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\move-0x88.js",
            "line": 119,
            "description": "Return fen with color switched",
            "itemtype": "method",
            "name": "getFenWithColorSwitched",
            "params": [
                {
                    "name": "fen",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "chess.parser.Move0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\move-0x88.js",
            "line": 134,
            "description": "Returns true if a move is promotion move",
            "itemtype": "method",
            "name": "isPromotionMove",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "fen",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "valid",
                "type": "Boolean"
            },
            "class": "chess.parser.Move0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\move-0x88.js",
            "line": 158,
            "description": "Returns true if a pawn is on given square",
            "itemtype": "method",
            "name": "isPawnOnSquare",
            "params": [
                {
                    "name": "square",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "chess.parser.Move0x88",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\parser0x88\\position-validator.js",
            "line": 11,
            "description": "Returns true if a position is valid.",
            "itemtype": "method",
            "name": "isValid",
            "params": [
                {
                    "name": "fenPosition",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "valid",
                "type": "Boolean"
            },
            "class": "chess.parser.PositionValidator",
            "module": "Parser",
            "namespace": "chess.parser"
        },
        {
            "file": "..\\api\\src\\pgn\\parser.js",
            "line": 20,
            "itemtype": "property",
            "name": "model",
            "type": "chess.model.Game",
            "access": "private",
            "tagname": "",
            "class": "chess.pgn.Parser",
            "module": "Parser",
            "namespace": "chess.pgn"
        },
        {
            "file": "..\\api\\src\\pgn\\parser.js",
            "line": 31,
            "description": "Return pgn in string format",
            "itemtype": "method",
            "name": "getPgn",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "chess.pgn.Parser",
            "module": "Parser",
            "namespace": "chess.pgn"
        },
        {
            "file": "..\\api\\src\\pgn\\parser.js",
            "line": 40,
            "itemtype": "method",
            "name": "getMetadata",
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "chess.pgn.Parser",
            "module": "Parser",
            "namespace": "chess.pgn"
        },
        {
            "file": "..\\api\\src\\pgn\\parser.js",
            "line": 55,
            "itemtype": "method",
            "name": "getMoves",
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "chess.pgn.Parser",
            "module": "Parser",
            "namespace": "chess.pgn"
        },
        {
            "file": "..\\api\\src\\pgn\\parser.js",
            "line": 64,
            "description": "Return comment before first move",
            "itemtype": "method",
            "name": "getFirstComment",
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "chess.pgn.Parser",
            "module": "Parser",
            "namespace": "chess.pgn"
        },
        {
            "file": "..\\api\\src\\pgn\\parser.js",
            "line": 78,
            "description": "Return main line of moves or a variation",
            "itemtype": "method",
            "name": "getMovesInBranch",
            "params": [
                {
                    "name": "moves",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "moveIndex",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "chess.pgn.Parser",
            "module": "Parser",
            "namespace": "chess.pgn"
        },
        {
            "file": "..\\api\\src\\view\\board\\board.js",
            "line": 16,
            "description": "Duration of piece animations in seconds.",
            "itemtype": "config",
            "name": "float animationDuration",
            "default": "0.35",
            "class": "chess.view.board.Board",
            "module": "Parser",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\board.js",
            "line": 22,
            "description": "Layout of pieces, examples: \"alphapale\", \"alpha\", \"merida\", \"kingdom\"",
            "itemtype": "config",
            "name": "string pieceLayout",
            "default": "alphapale",
            "class": "chess.view.board.Board",
            "module": "Parser",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\board.js",
            "line": 28,
            "description": "Layout of board. The name correspondes to the suffix of the CSS class\nludo-chess-board-container-wood. (In this example wood). If you want to create your own\nboard layout. You can specify a custom value for boardLayout, create your own graphic and\nimplement your own CSS rules. Take a look at css/board/board.css for more info",
            "itemtype": "config",
            "name": "string boardLayout",
            "default": "wood",
            "class": "chess.view.board.Board",
            "module": "Parser",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\board.js",
            "line": 90,
            "description": "All DHTML Chess 3 views are using the setController method. It is used to\ncontrol behaviour of the view. So if you want to create your own Chess View component, you\nshould take a look at setController. Example method:<br><br>\n    setController : function(controller){<br>\n        this.parent(controller); // always call supperclass\n        controller.addEvent('newGame', this.doSomethingOnNewGame.bind(this));\n    }\nHere, the method doSomethingOnNewGame will be executed every time the controller loads a new game",
            "itemtype": "method",
            "name": "setController",
            "params": [
                {
                    "name": "controller",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "chess.view.board.Board",
            "module": "Parser",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\board.js",
            "line": 116,
            "description": "Enable drag and drop feature of the board. It expects a game model as first argument.\nWhen connected to a controller event, the controller always sends current game model as\nfirst argument when it fire events.",
            "itemtype": "method",
            "name": "enableDragAndDrop",
            "params": [
                {
                    "name": "model",
                    "description": ""
                }
            ],
            "return": {
                "description": "void"
            },
            "class": "chess.view.board.Board",
            "module": "Parser",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\board.js",
            "line": 142,
            "description": "Disable drag and drop feature of the board",
            "itemtype": "method",
            "name": "disableDragAndDrop",
            "return": {
                "description": "void"
            },
            "class": "chess.view.board.Board",
            "module": "Parser",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\board.js",
            "line": 156,
            "description": "Animate/Play the \"movements\" involved in a move, example: O-O involves two moves,\nmoving the king and moving the rook. By default, this method will be executed when the\ncontroller fires newMove or nextmove event.",
            "itemtype": "method",
            "name": "playChainOfMoves",
            "params": [
                {
                    "name": "model",
                    "description": "",
                    "type": "game.model.Game"
                },
                {
                    "name": "move",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n   { m: 'O-O', moves : [{ from: 'e1', to: 'g1' },{ from:'h1', to: 'f1'}] }"
            ],
            "class": "chess.view.board.Board",
            "module": "Parser",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\board.js",
            "line": 248,
            "description": "Show start position of game",
            "itemtype": "method",
            "name": "showStartBoard",
            "params": [
                {
                    "name": "model",
                    "description": "",
                    "type": "game.model.Game"
                }
            ],
            "return": {
                "description": "void"
            },
            "class": "chess.view.board.Board",
            "module": "Parser",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\board.js",
            "line": 257,
            "description": "Show a specific FEN position on the board",
            "itemtype": "method",
            "name": "showFen",
            "params": [
                {
                    "name": "fen",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "undefined"
            },
            "class": "chess.view.board.Board",
            "module": "Parser",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\board.js",
            "line": 286,
            "description": "Return number of visible pieces on the board",
            "itemtype": "method",
            "name": "getCountPiecesOnBoard",
            "return": {
                "description": "int"
            },
            "class": "chess.view.board.Board",
            "module": "Parser",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\board.js",
            "line": 308,
            "description": "This method resets the board to the standard position at start of games",
            "itemtype": "method",
            "name": "resetBoard",
            "return": {
                "description": "void"
            },
            "class": "chess.view.board.Board",
            "module": "Parser",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\board.js",
            "line": 315,
            "description": "Event fired when board is reset to standard start position,\ni.e. fen: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
            "itemtype": "event",
            "name": "resetboard",
            "params": [
                {
                    "name": "Component",
                    "description": "this"
                }
            ],
            "class": "chess.view.board.Board",
            "module": "Parser",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\board.js",
            "line": 323,
            "description": "Remove all pieces from the board",
            "itemtype": "method",
            "name": "clearBoard",
            "return": {
                "description": "void"
            },
            "class": "chess.view.board.Board",
            "module": "Parser",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\board.js",
            "line": 333,
            "description": "Event fired when all pieces are being removed from the board via the clearBoard() method",
            "itemtype": "event",
            "name": "clearboard",
            "params": [
                {
                    "name": "Component",
                    "description": "this"
                }
            ],
            "class": "chess.view.board.Board",
            "module": "Parser",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\board.js",
            "line": 342,
            "description": "Event fired when a piece is moved from one square to another",
            "itemtype": "event",
            "name": "move",
            "params": [
                {
                    "name": "Object",
                    "description": "move, example:",
                    "type": "From: \"e2\", to: \"e4\""
                }
            ],
            "class": "chess.view.board.Board",
            "module": "Parser",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\board.js",
            "line": 353,
            "description": "Returns JSON object for a piece on a specific square or null if no piece is on the square",
            "itemtype": "method",
            "name": "getPieceOnSquare",
            "params": [
                {
                    "name": "square",
                    "description": "",
                    "type": "String"
                }
            ],
            "example": [
                "\n   alert(board.getPieceOnSquare('e4');"
            ],
            "class": "chess.view.board.Board",
            "module": "Parser",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\board.js",
            "line": 372,
            "description": "Flip board",
            "itemtype": "method",
            "name": "flip",
            "return": {
                "description": "void"
            },
            "class": "chess.view.board.Board",
            "module": "Parser",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\board.js",
            "line": 383,
            "description": "Show whites pieces at the bottom. If white is allready on the bottom, this method will do nothing.",
            "itemtype": "method",
            "name": "flipToWhite",
            "class": "chess.view.board.Board",
            "module": "Parser",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\board.js",
            "line": 392,
            "description": "Show blacks pieces at the bottom. If black is allready on the bottom, this method will do nothing.",
            "itemtype": "method",
            "name": "flipToBlack",
            "class": "chess.view.board.Board",
            "module": "Parser",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 14,
            "description": "Color of piece, \"white\" or \"black\"",
            "itemtype": "config",
            "name": "color",
            "type": "String",
            "default": "\"white\"",
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 24,
            "description": "0x88 board position of piece",
            "itemtype": "config",
            "name": "square",
            "type": "Number",
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 36,
            "description": "Type of piece",
            "itemtype": "config",
            "name": "pieceType",
            "type": "String",
            "example": [
                "\n   pieceType:'knight'"
            ],
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 78,
            "description": "Create DOM elements for the chess piece",
            "itemtype": "method",
            "name": "createDOM",
            "access": "private",
            "tagname": "",
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 119,
            "description": "Method executed when mouse enters a chess piece",
            "itemtype": "method",
            "name": "mouseEnterPiece",
            "access": "private",
            "tagname": "",
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 127,
            "description": "Method executed when mouse leaves a chess piece",
            "itemtype": "method",
            "name": "mouseLeavePiece",
            "access": "private",
            "tagname": "",
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 136,
            "description": "Disable drag and drop for the chess piece. This will set the internal ddEnabled property to\nfalse and reset cursor to arrow.",
            "itemtype": "method",
            "name": "disableDragAndDrop",
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 145,
            "description": "Enable drag and drop for the chess piece. This will set the internal ddEnabled property to true\nand update the cursor to a pointer/hand.",
            "itemtype": "method",
            "name": "enableDragAndDrop",
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 154,
            "description": "Returns true if chess piece is currently on board.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 162,
            "description": "Hide the chess piece",
            "itemtype": "method",
            "name": "hide",
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 169,
            "description": "Show the chess piece",
            "itemtype": "method",
            "name": "show",
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 176,
            "description": "Start dragging a chess piece",
            "itemtype": "method",
            "name": "initDragPiece",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean|undefined"
            },
            "access": "private",
            "tagname": "",
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 199,
            "description": "Method executed when dragging has started and mouse moves",
            "itemtype": "method",
            "name": "dragPiece",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean|undefined"
            },
            "access": "private",
            "tagname": "",
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 214,
            "description": "Stop dragging the chess piece.",
            "itemtype": "method",
            "name": "stopDragPiece",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 253,
            "description": "Return 0x88 square by screen coordinates",
            "itemtype": "method",
            "name": "getSquareByCoordinates",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 279,
            "description": "Return square of piece",
            "itemtype": "method",
            "name": "getSquare",
            "return": {
                "description": "square",
                "type": "String"
            },
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 288,
            "description": "Promote piece to this type",
            "itemtype": "method",
            "name": "promote",
            "params": [
                {
                    "name": "toType",
                    "description": "",
                    "type": "String"
                }
            ],
            "example": [
                "\n   piece.promote('queen');"
            ],
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 299,
            "description": "Update background image of piece when piece type is set or changed and when size of square is changed.",
            "itemtype": "method",
            "name": "updateBackgroundImage",
            "access": "private",
            "tagname": "",
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 308,
            "description": "Resize piece",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "squareSize",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 331,
            "description": "Position piece on board by 0x88 board square coordinate",
            "itemtype": "method",
            "name": "position",
            "params": [
                {
                    "name": "square",
                    "description": "",
                    "type": "Number"
                }
            ],
            "optional": 1,
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 343,
            "description": "Move piece on board to square",
            "itemtype": "method",
            "name": "playMove",
            "params": [
                {
                    "name": "toSquare",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 369,
            "description": "Returns true if piece is already on a given 0x88 square number",
            "itemtype": "method",
            "name": "isAlreadyOnSquare",
            "params": [
                {
                    "name": "square",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 380,
            "description": "Move piece to front",
            "itemtype": "method",
            "name": "increaseZindex",
            "access": "private",
            "tagname": "",
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 389,
            "description": "Method executed when move animation is complete",
            "itemtype": "method",
            "name": "animationComplete",
            "access": "private",
            "tagname": "",
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 401,
            "description": "Return x and y coordinate by 0x88 square number",
            "itemtype": "method",
            "name": "getPos",
            "params": [
                {
                    "name": "square",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "example": [
                "\n\t\tvar pos = piece.getPos();\n\t\t// may return\n\t\t{\n\t\t\t\"x\":\"12.5%\",\n\t\t\t\"y\":\"25%\"\n\t\t}"
            ],
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 421,
            "description": "Return x and y position of square by 0x88 coordinate(without the % suffix)",
            "itemtype": "method",
            "name": "getPosOfSquare",
            "params": [
                {
                    "name": "square",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 440,
            "description": "Return HTML element of piece",
            "itemtype": "method",
            "name": "getEl",
            "return": {
                "description": "",
                "type": "HTMLElement"
            },
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 448,
            "description": "Return color code of piece, \"w\" or \"b\"",
            "itemtype": "method",
            "name": "getColorCode",
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 457,
            "description": "Return lowercase piece type, i.e. \"k\",\"q\",\"r\",\"b\",\"n\" or \"p\"",
            "itemtype": "method",
            "name": "getTypeCode",
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 477,
            "description": "Executed when board is flipped. It will call the position method.",
            "itemtype": "method",
            "name": "flip",
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\board\\piece.js",
            "line": 485,
            "description": "Returns true if piece is already flipped",
            "itemtype": "method",
            "name": "isFlipped",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "chess.view.board.Piece",
            "module": "View",
            "submodule": "Board",
            "namespace": "chess.view.board"
        },
        {
            "file": "..\\api\\src\\view\\button\\save-game.js",
            "line": 25,
            "description": "Toggle enabling of button based on user access",
            "itemtype": "method",
            "name": "toggleonUserAccess",
            "params": [
                {
                    "name": "access",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "chess.view.button.SaveGame",
            "module": "View",
            "namespace": "chess.view.button"
        },
        {
            "file": "..\\api\\src\\view\\buttonbar\\game.js",
            "line": 70,
            "description": "Method executed after moving to start of game. It will disable the \"to start\" and \"previous\" move\nbuttons",
            "itemtype": "method",
            "name": "startOfGame",
            "access": "private",
            "tagname": "",
            "class": "chess.view.buttonbar.Game",
            "module": "View",
            "namespace": "chess.view.buttonbar"
        },
        {
            "file": "..\\api\\src\\view\\buttonbar\\game.js",
            "line": 81,
            "description": "Method executed when going from first move in a line to a move which is not the first. It will enable the \"To start\" and previous buttons.",
            "itemtype": "method",
            "name": "notStartOfBranch",
            "access": "private",
            "tagname": "",
            "class": "chess.view.buttonbar.Game",
            "module": "View",
            "namespace": "chess.view.buttonbar"
        },
        {
            "file": "..\\api\\src\\view\\buttonbar\\game.js",
            "line": 91,
            "description": "Method executed when going to last move in main line or a variation. It will disable the\n\"To end\", \"Next move\", \"Start autoplay\" and \"Pause autoplay\" buttons.",
            "itemtype": "method",
            "name": "endOfBranch",
            "access": "private",
            "tagname": "",
            "class": "chess.view.buttonbar.Game",
            "module": "View",
            "namespace": "chess.view.buttonbar"
        },
        {
            "file": "..\\api\\src\\view\\buttonbar\\game.js",
            "line": 105,
            "description": "Method executed when moving from last move in a line to a move which is not the last move in a line.\nIt will enable the \"To end\" and \"Next move\" buttons. If model is not in auto play mode, it\nwill also enable the \"Play\" button and hide the \"Pause\" button.",
            "itemtype": "method",
            "name": "notEndOfBranch",
            "params": [
                {
                    "name": "model",
                    "description": "",
                    "type": "game.model.Game"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "chess.view.buttonbar.Game",
            "module": "View",
            "namespace": "chess.view.buttonbar"
        },
        {
            "file": "..\\api\\src\\view\\buttonbar\\game.js",
            "line": 124,
            "description": "Method executed when auto play is started. It will enable and show the pause button and hide the play button",
            "itemtype": "method",
            "name": "startAutoPlay",
            "access": "private",
            "tagname": "",
            "class": "chess.view.buttonbar.Game",
            "module": "View",
            "namespace": "chess.view.buttonbar"
        },
        {
            "file": "..\\api\\src\\view\\buttonbar\\game.js",
            "line": 135,
            "description": "Method executed when auto play is stopped.\nIt will show the play button and hide the pause button. If current move on board is last move\nin main line or a variation, the play button will be disabled",
            "itemtype": "method",
            "name": "stopAutoPlay",
            "access": "private",
            "tagname": "",
            "class": "chess.view.buttonbar.Game",
            "module": "View",
            "namespace": "chess.view.buttonbar"
        },
        {
            "file": "..\\api\\src\\view\\buttonbar\\game.js",
            "line": 198,
            "description": "Hide a button",
            "itemtype": "method",
            "name": "hideButton",
            "params": [
                {
                    "name": "buttonType",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "chess.view.buttonbar.Game",
            "module": "View",
            "namespace": "chess.view.buttonbar"
        },
        {
            "file": "..\\api\\src\\view\\buttonbar\\game.js",
            "line": 211,
            "description": "Show a button",
            "itemtype": "method",
            "name": "showButton",
            "params": [
                {
                    "name": "buttonType",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "chess.view.buttonbar.Game",
            "module": "View",
            "namespace": "chess.view.buttonbar"
        },
        {
            "file": "..\\api\\src\\view\\buttonbar\\game.js",
            "line": 225,
            "description": "Disable a button",
            "itemtype": "method",
            "name": "disableButton",
            "params": [
                {
                    "name": "buttonType",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "chess.view.buttonbar.Game",
            "module": "View",
            "namespace": "chess.view.buttonbar"
        },
        {
            "file": "..\\api\\src\\view\\buttonbar\\game.js",
            "line": 237,
            "description": "Enable a button",
            "itemtype": "method",
            "name": "enableButton",
            "params": [
                {
                    "name": "buttonType",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "chess.view.buttonbar.Game",
            "module": "View",
            "namespace": "chess.view.buttonbar"
        },
        {
            "file": "..\\api\\src\\view\\command\\controller.js",
            "line": 30,
            "description": "Add listeners to the controller",
            "itemtype": "method",
            "name": "addControllerEvents",
            "class": "chess.view.command.Controller",
            "module": "View",
            "namespace": "chess.view.command"
        },
        {
            "file": "..\\api\\src\\view\\command\\controller.js",
            "line": 40,
            "description": "Return valid command name",
            "itemtype": "method",
            "name": "getValidCommand",
            "params": [
                {
                    "name": "command",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String|undefined"
            },
            "access": "private",
            "tagname": "",
            "class": "chess.view.command.Controller",
            "module": "View",
            "namespace": "chess.view.command"
        },
        {
            "file": "..\\api\\src\\view\\command\\controller.js",
            "line": 54,
            "description": "Extract command arguments from command message. The whole message would be returned\nwhen message is not a valid command.",
            "itemtype": "method",
            "name": "getCommandArguments",
            "params": [
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "example": [
                "\n   var args = controller.getCommandArguments('move e4');\n   // will return \"e4\""
            ],
            "class": "chess.view.command.Controller",
            "module": "View",
            "namespace": "chess.view.command"
        },
        {
            "file": "..\\api\\src\\view\\command\\controller.js",
            "line": 75,
            "description": "Execute a command",
            "itemtype": "method",
            "name": "execute",
            "params": [
                {
                    "name": "command",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "arg",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "chess.view.command.Controller",
            "module": "View",
            "namespace": "chess.view.command"
        },
        {
            "file": "..\\api\\src\\view\\command\\controller.js",
            "line": 118,
            "description": "Show command line help screen",
            "itemtype": "method",
            "name": "showHelp",
            "class": "chess.view.command.Controller",
            "module": "View",
            "namespace": "chess.view.command"
        },
        {
            "file": "..\\api\\src\\view\\command\\controller.js",
            "line": 134,
            "description": "Show invalid move message",
            "itemtype": "method",
            "name": "onInvalidMove",
            "class": "chess.view.command.Controller",
            "module": "View",
            "namespace": "chess.view.command"
        },
        {
            "file": "..\\api\\src\\view\\command\\controller.js",
            "line": 141,
            "description": "Using RegEx to validate a chess move.",
            "itemtype": "method",
            "name": "isChessMove",
            "params": [
                {
                    "name": "move",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "chess.view.command.Controller",
            "module": "View",
            "namespace": "chess.view.command"
        },
        {
            "file": "..\\api\\src\\view\\command\\controller.js",
            "line": 150,
            "description": "Receive move from main controller and display move message on screen",
            "itemtype": "method",
            "name": "receiveMove",
            "params": [
                {
                    "name": "controller",
                    "description": "",
                    "type": "chess.controller.Controller"
                },
                {
                    "name": "move",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "chess.view.command.Controller",
            "module": "View",
            "namespace": "chess.view.command"
        },
        {
            "file": "..\\api\\src\\view\\command\\controller.js",
            "line": 161,
            "description": "Fire a \"sendMessage\" event. Listening views may display this message on screen\n(example a chess.view.command.Panel view).",
            "itemtype": "method",
            "name": "message",
            "params": [
                {
                    "name": "msg",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "chess.view.command.Controller",
            "module": "View",
            "namespace": "chess.view.command"
        },
        {
            "file": "..\\api\\src\\view\\command\\controller.js",
            "line": 170,
            "description": "Fire a \"sendErrorMessage\" event. A chess.view.command.Panel view will listen to\nthis event and display the error message on screen",
            "itemtype": "method",
            "name": "errorMessage",
            "params": [
                {
                    "name": "msg",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "chess.view.command.Controller",
            "module": "View",
            "namespace": "chess.view.command"
        },
        {
            "file": "..\\api\\src\\view\\command\\controller.js",
            "line": 180,
            "description": "Returns true if passed argument is a valid move grade/short comment, i.e.\n!,?,!!,??,!? or ?!",
            "itemtype": "method",
            "name": "isValidGrade",
            "params": [
                {
                    "name": "arg",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "chess.view.command.Controller",
            "module": "View",
            "namespace": "chess.view.command"
        },
        {
            "file": "..\\api\\src\\view\\command\\controller.js",
            "line": 190,
            "description": "Receive move update from main controller and fire a message event which will\nbe displayed by a chess.view.command.Panel view",
            "itemtype": "method",
            "name": "recieveMoveUpdate",
            "params": [
                {
                    "name": "model",
                    "description": "",
                    "type": "chess.model.Game"
                },
                {
                    "name": "move",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "class": "chess.view.command.Controller",
            "module": "View",
            "namespace": "chess.view.command"
        },
        {
            "file": "..\\api\\src\\view\\command\\line.js",
            "line": 16,
            "description": "Key stroke listener",
            "itemtype": "method",
            "name": "validateKey",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean|undefined"
            },
            "access": "private",
            "tagname": "",
            "class": "chess.view.command.Line",
            "module": "View",
            "namespace": "chess.view.command"
        },
        {
            "file": "..\\api\\src\\view\\command\\line.js",
            "line": 33,
            "description": "Fire sendMessage event with value of text field",
            "itemtype": "method",
            "name": "send",
            "access": "private",
            "tagname": "",
            "class": "chess.view.command.Line",
            "module": "View",
            "namespace": "chess.view.command"
        },
        {
            "file": "..\\api\\src\\view\\command\\panel.js",
            "line": 21,
            "description": "Add events to a chess.view.command.Controller instance",
            "itemtype": "method",
            "name": "addControllerEvents",
            "class": "chess.view.command.Panel",
            "module": "View",
            "namespace": "chess.view.command"
        },
        {
            "file": "..\\api\\src\\view\\command\\panel.js",
            "line": 31,
            "description": "Clear message panel",
            "itemtype": "method",
            "name": "clear",
            "class": "chess.view.command.Panel",
            "module": "View",
            "namespace": "chess.view.command"
        },
        {
            "file": "..\\api\\src\\view\\command\\panel.js",
            "line": 40,
            "description": "Render error message inside panel",
            "itemtype": "method",
            "name": "renderErrorLine",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "chess.view.command.Panel",
            "module": "View",
            "namespace": "chess.view.command"
        },
        {
            "file": "..\\api\\src\\view\\command\\panel.js",
            "line": 48,
            "description": "Render message inside panel assigned to optional CSS class(cls)",
            "itemtype": "method",
            "name": "renderLine",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cls",
                    "description": "",
                    "type": "String"
                }
            ],
            "optional": 1,
            "class": "chess.view.command.Panel",
            "module": "View",
            "namespace": "chess.view.command"
        },
        {
            "file": "..\\api\\src\\view\\dialog\\comment.js",
            "line": 53,
            "description": "Show comments before a move. Automatically executed when commentAfter event is fired by controller",
            "itemtype": "method",
            "name": "commentBefore",
            "params": [
                {
                    "name": "model",
                    "description": "",
                    "type": "chess.model.Game"
                },
                {
                    "name": "move",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "chess.view.dialog.Comment",
            "module": "View",
            "namespace": "chess.view.dialog"
        },
        {
            "file": "..\\api\\src\\view\\dialog\\comment.js",
            "line": 64,
            "description": "Show comments after a move. Automatically executed when commentAfter event is fired by controller",
            "itemtype": "method",
            "name": "commentAfter",
            "params": [
                {
                    "name": "model",
                    "description": "",
                    "type": "chess.model.Game"
                },
                {
                    "name": "move",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "chess.view.dialog.Comment",
            "module": "View",
            "namespace": "chess.view.dialog"
        },
        {
            "file": "..\\api\\src\\view\\dialog\\new-game.js",
            "line": 51,
            "description": "New game event. When fired it will send all values from the form as only argument.",
            "itemtype": "event",
            "name": "newGame",
            "params": [
                {
                    "name": "metadata",
                    "description": "values",
                    "type": "Array"
                }
            ],
            "class": "chess.view.dialog.NewGame",
            "module": "View",
            "submodule": "Dialog",
            "namespace": "chess.view.dialog"
        },
        {
            "file": "..\\api\\src\\view\\dialog\\overwrite-move.js",
            "line": 33,
            "description": "Overwrite current move in model with a new move",
            "itemtype": "event",
            "name": "overwriteMove",
            "params": [
                {
                    "name": "oldMove",
                    "description": "",
                    "type": "chess.model.Move"
                },
                {
                    "name": "newMove",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "class": "chess.view.dialog.OverwriteMove",
            "module": "View",
            "submodule": "Dialog",
            "namespace": "chess.view.dialog"
        },
        {
            "file": "..\\api\\src\\view\\dialog\\overwrite-move.js",
            "line": 47,
            "description": "Create a new variation",
            "itemtype": "event",
            "name": "newVariation",
            "params": [
                {
                    "name": "oldMove",
                    "description": "",
                    "type": "chess.model.Move"
                },
                {
                    "name": "newMove",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "class": "chess.view.dialog.OverwriteMove",
            "module": "View",
            "submodule": "Dialog",
            "namespace": "chess.view.dialog"
        },
        {
            "file": "..\\api\\src\\view\\dialog\\overwrite-move.js",
            "line": 61,
            "description": "Cancel new move, i.e. no overwrite and no new variations.",
            "itemtype": "event",
            "name": "cancelOverwrite",
            "class": "chess.view.dialog.OverwriteMove",
            "module": "View",
            "submodule": "Dialog",
            "namespace": "chess.view.dialog"
        },
        {
            "file": "..\\api\\src\\view\\dialog\\promote.js",
            "line": 63,
            "description": "Event fired after promoted piece type has been selected. the promoteTo property of the move is updated",
            "itemtype": "event",
            "name": "promote",
            "params": [
                {
                    "name": "updatedMove",
                    "description": "",
                    "type": "chess.model.Move"
                }
            ],
            "class": "chess.view.dialog.Promote",
            "module": "View",
            "submodule": "Dialog",
            "namespace": "chess.view.dialog"
        },
        {
            "file": "..\\api\\src\\view\\folder\\tree.js",
            "line": 46,
            "description": "Fired on click on database in the tree.",
            "itemtype": "event",
            "name": "selectDatabase",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\t{ id:4, type:'database' }\nis example of record sent with the event."
            ],
            "class": "chess.view.folder.Tree",
            "module": "View",
            "submodule": "Tree",
            "namespace": "chess.view.folder"
        },
        {
            "file": "..\\api\\src\\view\\gamelist\\grid.js",
            "line": 38,
            "description": "Columns to show in grid. Columns correspondes to metadata of games, example\nwhite,black,result, event, eco",
            "itemtype": "config",
            "name": "cols",
            "type": "Array",
            "optional": 1,
            "example": [
                "\n\tcols:['white','black']"
            ],
            "class": "chess.view.gamelist.Grid",
            "module": "View",
            "submodule": "Grid",
            "namespace": "chess.view.gamelist"
        },
        {
            "file": "..\\api\\src\\view\\gamelist\\grid.js",
            "line": 86,
            "description": "initial database id. Show the games from this database when the grid is first displayed.",
            "itemtype": "config",
            "name": "databaseId",
            "type": "{Number}",
            "default": "undefined",
            "class": "chess.view.gamelist.Grid",
            "module": "View",
            "submodule": "Grid",
            "namespace": "chess.view.gamelist"
        },
        {
            "file": "..\\api\\src\\view\\gamelist\\grid.js",
            "line": 103,
            "description": "Select a new database",
            "itemtype": "method",
            "name": "selectDatabase",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "chess.view.gamelist.Grid",
            "module": "View",
            "submodule": "Grid",
            "namespace": "chess.view.gamelist"
        },
        {
            "file": "..\\api\\src\\view\\gamelist\\grid.js",
            "line": 143,
            "description": "Event fired on click on game in grid.",
            "itemtype": "event",
            "name": "selectGame",
            "params": [
                {
                    "name": "game",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "chess.view.gamelist.Grid",
            "module": "View",
            "submodule": "Grid",
            "namespace": "chess.view.gamelist"
        },
        {
            "file": "..\\api\\src\\view\\highlight\\arrow-svg.js",
            "line": 34,
            "itemtype": "config",
            "name": "arrowPaint",
            "type": "{ludo.canvas.Paint}",
            "example": [
                ""
            ],
            "class": "chess.view.highlight.Arrow",
            "module": "View",
            "namespace": "chess.view.gamelist"
        },
        {
            "file": "..\\api\\src\\view\\highlight\\arrow-tactic.js",
            "line": 3,
            "description": "Delay before automatically hiding arrow",
            "itemtype": "config",
            "name": "delay",
            "type": "Number",
            "default": "1",
            "class": "chess.view.highlight.Arrow",
            "module": "View",
            "namespace": "chess.view.gamelist"
        },
        {
            "file": "..\\api\\src\\view\\menu-item\\new-game.js",
            "line": 16,
            "description": "Fired on click",
            "itemtype": "event",
            "name": "newGame",
            "class": "chess.view.menuItems.NewGame",
            "module": "View",
            "submodule": "Menu",
            "namespace": "chess.view.menuItems"
        },
        {
            "file": "..\\api\\src\\view\\menu-item\\save-game.js",
            "line": 16,
            "description": "Fired on click",
            "itemtype": "event",
            "name": "saveGame",
            "class": "chess.view.SaveGame.NewGame",
            "module": "View",
            "submodule": "Menu",
            "namespace": "chess.view.SaveGame"
        },
        {
            "file": "..\\api\\src\\view\\metadata\\game.js",
            "line": 13,
            "description": "How metadata are displayed is configured using \"tpl\".",
            "itemtype": "config",
            "name": "tpl",
            "type": "String",
            "example": [
                "\n\t'{white} vs {black}, {result}'"
            ],
            "class": "chess.view.metadata.Game",
            "module": "View",
            "namespace": "chess.view.metadata"
        },
        {
            "file": "..\\api\\src\\view\\metadata\\move.js",
            "line": 14,
            "description": "tpl is used to configure how to display info about current move. You use curly braces to indicate\nwhere to insert move information. You can use the keys available in chess.model.Move",
            "itemtype": "config",
            "name": "tpl",
            "default": "''",
            "example": [
                "\n\ttpl:'Current move: {from}-{to}'\n\t...\n\ttpl:'{lm} // long notation\n\t...\n\ttpl:'{m} // short notation"
            ],
            "class": "chess.view.metadata.Move",
            "module": "View",
            "namespace": "chess.view.metadata"
        },
        {
            "file": "..\\api\\src\\view\\notation\\panel.js",
            "line": 30,
            "description": "Long or short notations. Example of long: \"e2-e4\". Example of short: \"e4\".\nValid values : \"short\" and \"long\"",
            "itemtype": "config",
            "name": "notations",
            "type": "{String}",
            "default": "'short'",
            "class": "chess.view.notation.Panel",
            "module": "View",
            "namespace": "chess.view.notation"
        },
        {
            "file": "..\\api\\src\\view\\notation\\panel.js",
            "line": 43,
            "description": "Show context menu for grading of moves, comments etc",
            "itemtype": "config",
            "name": "showContextMenu",
            "type": "{Boolean}",
            "default": "false",
            "class": "chess.view.notation.Panel",
            "module": "View",
            "namespace": "chess.view.notation"
        },
        {
            "file": "..\\api\\src\\view\\pgn\\grid.js",
            "line": 49,
            "description": "initial database id. Show the games from this database when the grid is first displayed.",
            "itemtype": "config",
            "name": "databaseId",
            "type": "{Number}",
            "default": "undefined",
            "class": "chess.view.gamelist.Grid",
            "module": "View",
            "submodule": "Grid",
            "namespace": "chess.view.gamelist"
        },
        {
            "file": "..\\api\\src\\view\\pgn\\grid.js",
            "line": 82,
            "description": "Event fired on click on game in grid.",
            "itemtype": "event",
            "name": "selectPgn",
            "params": [
                {
                    "name": "game",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "chess.view.gamelist.Grid",
            "module": "View",
            "submodule": "Grid",
            "namespace": "chess.view.gamelist"
        },
        {
            "file": "..\\api\\src\\view\\position\\castling.js",
            "line": 69,
            "description": "Set castle value, example value: 'qKQ'",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "castle",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "undefined"
            },
            "class": "chess.view.position.Castling",
            "module": "View",
            "namespace": "chess.view.position"
        },
        {
            "file": "..\\api\\src\\view\\position\\dialog.js",
            "line": 213,
            "itemtype": "event",
            "name": "setPosition",
            "params": [
                {
                    "name": "String",
                    "description": "FEN position"
                }
            ],
            "class": "chess.view.position.Dialog",
            "module": "View",
            "namespace": "chess.view.position"
        },
        {
            "file": "..\\api\\src\\view\\user\\panel.js",
            "line": 15,
            "description": "Text template for the panel",
            "itemtype": "config",
            "name": "tpl",
            "type": "String",
            "default": "'<b>' + chess.language.signedInAs + ' {username}</b>'",
            "class": "chess.view.user.Panel",
            "module": "View",
            "submodule": "User",
            "namespace": "chess.view.user"
        },
        {
            "file": "..\\api\\src\\view\\user\\panel.js",
            "line": 23,
            "itemtype": "config",
            "name": "css",
            "type": "{Object}",
            "default": "css : {\n\t         'text-align' : 'right'\n\t     }",
            "class": "chess.view.user.Panel",
            "module": "View",
            "submodule": "User",
            "namespace": "chess.view.user"
        },
        {
            "file": "..\\api\\src\\view\\user\\register-window.js",
            "line": 71,
            "description": "Event fired when user registration was successful.",
            "itemtype": "event",
            "name": "registerSuccess",
            "params": [
                {
                    "name": "JSON",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "rememberMe",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "chess.view.user.RegisterWindow",
            "module": "View",
            "submodule": "User",
            "namespace": "chess.view.user"
        }
    ]
}